# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, BayesML Developers
# This file is distributed under the same license as the BayesML package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: BayesML \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-21 23:58+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../bayesml.categorical.rst:2
msgid "bayesml.categorical package"
msgstr ""

#: ../../bayesml.categorical.rst:7
msgid "Module contents"
msgstr ""

#: bayesml.categorical:1 of
msgid "The categorical distribution with the dirichlet prior distribution"
msgstr ""

#: bayesml.categorical:3 of
msgid "The stochastic data generative model is as follows:"
msgstr ""

#: bayesml.categorical:5 of
#, python-brace-format
msgid ":math:`d\\in \\mathbb{Z}`: a dimension (:math:`d \\geq 2`)"
msgstr ""

#: bayesml.categorical:6 of
#, python-brace-format
msgid ""
":math:`\\boldsymbol{x} \\in \\{ 0, 1\\}^d`: a data point, (a one-hot "
"vector, i.e., :math:`\\sum_{k=1}^d x_k=1`)"
msgstr ""

#: bayesml.categorical:7 of
#, python-brace-format
msgid ""
":math:`\\boldsymbol{\\theta} \\in [0, 1]^d`: a parameter, "
"(:math:`\\sum_{k=1}^d \\theta_k=1`)"
msgstr ""

#: bayesml.categorical:9 of
#, python-brace-format
msgid ""
"p(\\boldsymbol{x} | \\boldsymbol{\\theta}) = "
"\\mathrm{Cat}(\\boldsymbol{x}|\\boldsymbol{\\theta}) = \\prod_{k=1}^d "
"\\theta_k^{x_k},\n"
"\n"
msgstr ""

#: bayesml.categorical:12 of
#, python-brace-format
msgid ""
"\\mathbb{E}[\\boldsymbol{x} | \\boldsymbol{\\theta}] &= "
"\\boldsymbol{\\theta}, \\\\\n"
"\\mathbb{V}[x_k | \\boldsymbol{\\theta}] &= \\theta_k (1 - \\theta_k), "
"\\\\\n"
"\\mathrm{Cov}[x_k, x_{k'} | \\boldsymbol{\\theta}] &= -\\theta_k "
"\\theta_{k'}.\n"
"\n"
msgstr ""

#: bayesml.categorical:18 of
msgid "The prior distribution is as follows:"
msgstr ""

#: bayesml.categorical:20 of
#, python-brace-format
msgid ":math:`\\boldsymbol{\\alpha}_0 \\in \\mathbb{R}_{>0}^d`: a hyperparameter"
msgstr ""

#: bayesml.categorical:21 of
msgid ":math:`\\Gamma (\\cdot)`: the gamma function"
msgstr ""

#: bayesml.categorical:22 of
#, python-brace-format
msgid ":math:`\\tilde{\\alpha}_0 = \\sum_{k=1}^d \\alpha_{0,k}`"
msgstr ""

#: bayesml.categorical:23 of
msgid ":math:`C(\\boldsymbol{\\alpha}_0)=\\frac{\\Gamma(\\tilde{\\alpha}_0)}{\\Gamma(\\alpha_{0,1})\\cdots\\Gamma(\\alpha_{0,d})}`"
msgstr ""

#: bayesml.categorical:25 of
msgid ""
"p(\\boldsymbol{\\theta}) = "
"\\mathrm{Dir}(\\boldsymbol{\\theta}|\\boldsymbol{\\alpha}_0) = "
"C(\\boldsymbol{\\alpha}_0)\\prod_{k=1}^d\\theta_k^{\\alpha_{0,k}-1},\n"
"\n"
msgstr ""

#: bayesml.categorical:28 of
msgid ""
"\\mathbb{E}[\\boldsymbol{\\theta}] &= "
"\\frac{\\boldsymbol{\\alpha}_0}{\\tilde{\\alpha}_0}, \\\\\n"
"\\mathbb{V}[\\theta_k] &= \\frac{1}{\\tilde{\\alpha}_0 + 1} "
"\\frac{\\alpha_{0,k}}{\\tilde{\\alpha}_0} \\left(1 - "
"\\frac{\\alpha_{0,k}}{\\tilde{\\alpha}_0} \\right), \\\\\n"
"\\mathrm{Cov}[\\theta_k, \\theta_{k'}] &= - \\frac{1}{\\tilde{\\alpha}_0 "
"+ 1} \\frac{\\alpha_{0,k}}{\\tilde{\\alpha}_0} "
"\\frac{\\alpha_{0,k'}}{\\tilde{\\alpha}_0}.\n"
"\n"
msgstr ""

#: bayesml.categorical:33 of
msgid "The posterior distribution is as follows:"
msgstr ""

#: bayesml.categorical:35 of
#, python-brace-format
msgid ""
":math:`\\boldsymbol{x}^n = (\\boldsymbol{x}_1, \\boldsymbol{x}_2, \\dots "
", \\boldsymbol{x}_n) \\in \\{ 0, 1\\}^{d\\times n}`: given data"
msgstr ""

#: bayesml.categorical:36 of
#, python-brace-format
msgid ":math:`\\boldsymbol{\\alpha}_n \\in \\mathbb{R}_{>0}^d`: a hyperparameter"
msgstr ""

#: bayesml.categorical:37 of
#, python-brace-format
msgid ":math:`\\tilde{\\alpha}_n = \\sum_{k=1}^d \\alpha_{n,k}`"
msgstr ""

#: bayesml.categorical:38 of
msgid ":math:`C(\\boldsymbol{\\alpha}_n)=\\frac{\\Gamma(\\tilde{\\alpha}_n)}{\\Gamma(\\alpha_{n,1})\\cdots\\Gamma(\\alpha_{n,d})}`"
msgstr ""

#: bayesml.categorical:40 of
msgid ""
"p(\\boldsymbol{\\theta} | \\boldsymbol{x}^n) = "
"\\mathrm{Dir}(\\boldsymbol{\\theta}|\\boldsymbol{\\alpha}_n) = "
"C(\\boldsymbol{\\alpha}_n)\\prod_{k=1}^d\\theta_k^{\\alpha_{n,k}-1},\n"
"\n"
msgstr ""

#: bayesml.categorical:43 of
msgid ""
"\\mathbb{E}[\\boldsymbol{\\theta} | \\boldsymbol{x}^n] &= "
"\\frac{\\boldsymbol{\\alpha}_n}{\\tilde{\\alpha}_n}, \\\\\n"
"\\mathbb{V}[\\theta_k | \\boldsymbol{x}^n] &= "
"\\frac{1}{\\tilde{\\alpha}_n + 1} "
"\\frac{\\alpha_{n,k}}{\\tilde{\\alpha}_n} \\left(1 - "
"\\frac{\\alpha_{n,k}}{\\tilde{\\alpha}_n} \\right), \\\\\n"
"\\mathrm{Cov}[\\theta_k, \\theta_{k'} | \\boldsymbol{x}^n] &= - "
"\\frac{1}{\\tilde{\\alpha}_n + 1} "
"\\frac{\\alpha_{n,k}}{\\tilde{\\alpha}_n} "
"\\frac{\\alpha_{n,k'}}{\\tilde{\\alpha}_n},\n"
"\n"
msgstr ""

#: bayesml.categorical:48 of
msgid "where the updating rule of the hyperparameters is as follows."
msgstr ""

#: bayesml.categorical:50 of
#, python-brace-format
msgid ""
"\\alpha_{n,k} = \\alpha_{0,k} + \\sum_{i=1}^n x_{i,k}, \\quad (k \\in \\{"
" 1, 2, \\dots , d \\}).\n"
"\n"
msgstr ""

#: bayesml.categorical:53 of
msgid "The predictive distribution is as follows:"
msgstr ""

#: bayesml.categorical:55 of
#, python-brace-format
msgid ":math:`\\boldsymbol{x}_{n+1} \\in \\{ 0, 1\\}^d`: a new data point"
msgstr ""

#: bayesml.categorical:56 of
msgid ""
":math:`\\boldsymbol{\\theta}_\\mathrm{p} \\in [0, 1]^d`: the "
"hyperparameter of the posterior (:math:`\\sum_{k=1}^d "
"\\theta_{\\mathrm{p},k} = 1`)"
msgstr ""

#: bayesml.categorical:58 of
msgid ""
"p(\\boldsymbol{x}_{n+1} | \\boldsymbol{x}^n) = "
"\\mathrm{Cat}(\\boldsymbol{x}_{n+1}|\\boldsymbol{\\theta}_\\mathrm{p}) = "
"\\prod_{k=1}^d \\theta_{\\mathrm{p},k}^{x_{n+1,k}},\n"
"\n"
msgstr ""

#: bayesml.categorical:61 of
msgid ""
"\\mathbb{E}[\\boldsymbol{x}_{n+1} | \\boldsymbol{x}^n] &= "
"\\boldsymbol{\\theta}_\\mathrm{p}, \\\\\n"
"\\mathbb{V}[x_{n+1,k} | \\boldsymbol{x}^n] &= \\theta_{\\mathrm{p},k} (1 "
"- \\theta_{\\mathrm{p},k}), \\\\\n"
"\\mathrm{Cov}[x_{n+1,k}, x_{n+1,k'} | \\boldsymbol{x}^n] &= "
"-\\theta_{\\mathrm{p},k} \\theta_{\\mathrm{p},k'},\n"
"\n"
msgstr ""

#: bayesml.categorical:66 of
msgid ""
"where the parameters are obtained from the hyperparameters of the "
"posterior distribution as follows:"
msgstr ""

#: bayesml.categorical:68 of
msgid ""
"\\theta_{\\mathrm{p},k} = \\frac{\\alpha_{n,k}}{\\sum_{k=1}^d "
"\\alpha_{n,k}}, \\quad (k \\in \\{ 1, 2, \\dots , d \\}).\n"
"\n"
msgstr ""

#: bayesml.categorical._categorical.GenModel:1 of
msgid "Bases: :py:class:`~bayesml.base.Generative`"
msgstr ""

#: bayesml.categorical._categorical.GenModel:2 of
msgid "The stochastic data generative model and the prior distribution"
msgstr ""

#: bayesml.categorical._categorical.GenModel
#: bayesml.categorical._categorical.GenModel.gen_sample
#: bayesml.categorical._categorical.GenModel.save_sample
#: bayesml.categorical._categorical.GenModel.set_h_params
#: bayesml.categorical._categorical.GenModel.set_params
#: bayesml.categorical._categorical.GenModel.visualize_model
#: bayesml.categorical._categorical.LearnModel
#: bayesml.categorical._categorical.LearnModel.estimate_params
#: bayesml.categorical._categorical.LearnModel.fit
#: bayesml.categorical._categorical.LearnModel.make_prediction
#: bayesml.categorical._categorical.LearnModel.pred_and_update
#: bayesml.categorical._categorical.LearnModel.predict
#: bayesml.categorical._categorical.LearnModel.set_h0_params
#: bayesml.categorical._categorical.LearnModel.set_hn_params
#: bayesml.categorical._categorical.LearnModel.update_posterior of
msgid "Parameters"
msgstr ""

#: bayesml.categorical._categorical.GenModel:7
#: bayesml.categorical._categorical.LearnModel:7 of
msgid "**c_degree**"
msgstr ""

#: bayesml.categorical._categorical.GenModel:-1
#: bayesml.categorical._categorical.GenModel.gen_sample:-1
#: bayesml.categorical._categorical.GenModel.save_sample:-1
#: bayesml.categorical._categorical.LearnModel:-1 of
msgid "int"
msgstr ""

#: bayesml.categorical._categorical.GenModel:8
#: bayesml.categorical._categorical.LearnModel:8 of
msgid "a positive integer."
msgstr ""

#: bayesml.categorical._categorical.GenModel:10 of
msgid "**theta_vec**"
msgstr ""

#: bayesml.categorical._categorical.GenModel:-1
#: bayesml.categorical._categorical.GenModel.set_h_params:-1
#: bayesml.categorical._categorical.GenModel.set_params:-1
#: bayesml.categorical._categorical.LearnModel.set_h0_params:-1
#: bayesml.categorical._categorical.LearnModel.set_hn_params:-1 of
msgid "numpy ndarray, optional"
msgstr ""

#: bayesml.categorical._categorical.GenModel:11 of
msgid "a real vector in :math:`[0, 1]^d`, by default [1/d, 1/d, ... , 1/d]"
msgstr ""

#: bayesml.categorical._categorical.GenModel:13
#: bayesml.categorical._categorical.GenModel.set_h_params:7 of
msgid "**h_alpha_vec**"
msgstr ""

#: bayesml.categorical._categorical.GenModel:14
#: bayesml.categorical._categorical.LearnModel:11 of
msgid ""
"a vector of positive real numbers, by default [1/2, 1/2, ... , 1/2].  If "
"a single real number is input, it will be broadcasted."
msgstr ""

#: bayesml.categorical._categorical.GenModel:17 of
msgid "**seed**"
msgstr ""

#: bayesml.categorical._categorical.GenModel:-1 of
#, python-brace-format
msgid "{None, int}, optional"
msgstr ""

#: bayesml.categorical._categorical.GenModel:18 of
msgid "A seed to initialize numpy.random.default_rng(), by default None"
msgstr ""

#: bayesml.categorical._categorical.GenModel:23
#: bayesml.categorical._categorical.LearnModel:23 of
msgid "Methods"
msgstr ""

#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid ":py:obj:`gen_params <bayesml.categorical.GenModel.gen_params>`\\ \\(\\)"
msgstr ""

#: bayesml.categorical._categorical.GenModel.gen_params:2
#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid "Generate the parameter from the prior distribution."
msgstr ""

#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid ""
":py:obj:`gen_sample <bayesml.categorical.GenModel.gen_sample>`\\ "
"\\(sample\\_size\\[\\, onehot\\]\\)"
msgstr ""

#: bayesml.categorical._categorical.GenModel.gen_sample:2
#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid "Generate a sample from the stochastic data generative model."
msgstr ""

#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid ""
":py:obj:`get_constants <bayesml.categorical.GenModel.get_constants>`\\ "
"\\(\\)"
msgstr ""

#: bayesml.categorical._categorical.GenModel.get_constants:2
#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid "Get constants of GenModel."
msgstr ""

#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid ""
":py:obj:`get_h_params <bayesml.categorical.GenModel.get_h_params>`\\ "
"\\(\\)"
msgstr ""

#: bayesml.categorical._categorical.GenModel.get_h_params:2
#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid "Get the hyperparameters of the prior distribution."
msgstr ""

#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid ":py:obj:`get_params <bayesml.categorical.GenModel.get_params>`\\ \\(\\)"
msgstr ""

#: bayesml.categorical._categorical.GenModel.get_params:2
#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid "Get the parameter of the sthocastic data generative model."
msgstr ""

#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid ""
":py:obj:`load_h_params <bayesml.categorical.GenModel.load_h_params>`\\ "
"\\(filename\\)"
msgstr ""

#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid "Load the hyperparameters to h_params."
msgstr ""

#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid ""
":py:obj:`load_params <bayesml.categorical.GenModel.load_params>`\\ "
"\\(filename\\)"
msgstr ""

#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid "Load the parameters saved by ``save_params``."
msgstr ""

#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid ""
":py:obj:`save_h_params <bayesml.categorical.GenModel.save_h_params>`\\ "
"\\(filename\\)"
msgstr ""

#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1
#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid "Save the hyperparameters using python ``pickle`` module."
msgstr ""

#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid ""
":py:obj:`save_params <bayesml.categorical.GenModel.save_params>`\\ "
"\\(filename\\)"
msgstr ""

#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid "Save the parameters using python ``pickle`` module."
msgstr ""

#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid ""
":py:obj:`save_sample <bayesml.categorical.GenModel.save_sample>`\\ "
"\\(filename\\, sample\\_size\\[\\, onehot\\]\\)"
msgstr ""

#: bayesml.categorical._categorical.GenModel.save_sample:2
#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid "Save the generated sample as NumPy ``.npz`` format."
msgstr ""

#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid ""
":py:obj:`set_h_params <bayesml.categorical.GenModel.set_h_params>`\\ "
"\\(\\[h\\_alpha\\_vec\\]\\)"
msgstr ""

#: bayesml.categorical._categorical.GenModel.set_h_params:2
#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1
#: bayesml.categorical._categorical.LearnModel.set_h0_params:2
#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid "Set the hyperparameters of the prior distribution."
msgstr ""

#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid ""
":py:obj:`set_params <bayesml.categorical.GenModel.set_params>`\\ "
"\\(\\[theta\\_vec\\]\\)"
msgstr ""

#: bayesml.categorical._categorical.GenModel.set_params:2
#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid "Set the parameter of the sthocastic data generative model."
msgstr ""

#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid ""
":py:obj:`visualize_model "
"<bayesml.categorical.GenModel.visualize_model>`\\ \\(\\[sample\\_size\\, "
"sample\\_num\\]\\)"
msgstr ""

#: bayesml.categorical._categorical.GenModel.visualize_model:2
#: bayesml.categorical._categorical.GenModel:51:<autosummary>:1 of
msgid "Visualize the stochastic data generative model and generated samples."
msgstr ""

#: bayesml.categorical._categorical.GenModel.gen_sample
#: bayesml.categorical._categorical.GenModel.get_constants
#: bayesml.categorical._categorical.GenModel.get_h_params
#: bayesml.categorical._categorical.GenModel.get_params
#: bayesml.categorical._categorical.LearnModel.calc_log_marginal_likelihood
#: bayesml.categorical._categorical.LearnModel.estimate_params
#: bayesml.categorical._categorical.LearnModel.fit
#: bayesml.categorical._categorical.LearnModel.get_constants
#: bayesml.categorical._categorical.LearnModel.get_h0_params
#: bayesml.categorical._categorical.LearnModel.get_hn_params
#: bayesml.categorical._categorical.LearnModel.get_p_params
#: bayesml.categorical._categorical.LearnModel.make_prediction
#: bayesml.categorical._categorical.LearnModel.pred_and_update
#: bayesml.categorical._categorical.LearnModel.predict
#: bayesml.categorical._categorical.LearnModel.predict_proba of
msgid "Returns"
msgstr ""

#: bayesml.categorical._categorical.GenModel.get_constants:10
#: bayesml.categorical._categorical.LearnModel.get_constants:10 of
msgid "**constants**"
msgstr ""

#: bayesml.categorical._categorical.GenModel.get_constants:-1
#: bayesml.categorical._categorical.LearnModel.get_constants:-1 of
#, python-brace-format
msgid "dict of {str: int}"
msgstr ""

#: bayesml.categorical._categorical.GenModel.get_constants:11
#: bayesml.categorical._categorical.LearnModel.get_constants:11 of
msgid "``\"c_degree\"`` : the value of ``self.c_degree``"
msgstr ""

#: bayesml.categorical._categorical.GenModel.set_h_params:8
#: bayesml.categorical._categorical.LearnModel.set_h0_params:8
#: bayesml.categorical._categorical.LearnModel.set_hn_params:8 of
msgid ""
"a vector of positive real numbers, by default None. If a single real "
"number is input, it will be broadcasted."
msgstr ""

#: bayesml.categorical._categorical.GenModel.get_h_params:10 of
msgid "**h_params**"
msgstr ""

#: bayesml.categorical._categorical.GenModel.get_h_params:-1
#: bayesml.categorical._categorical.GenModel.get_params:-1 of
#, python-brace-format
msgid "{str:numpy ndarray}"
msgstr ""

#: bayesml.categorical._categorical.GenModel.get_h_params:11 of
#, python-brace-format
msgid "``{\"h_alpha_vec\": self.h_alpha_vec}``"
msgstr ""

#: bayesml.categorical._categorical.GenModel.gen_params:4 of
msgid "The generated vaule is set at ``self.theta_vec``."
msgstr ""

#: bayesml.categorical._categorical.GenModel.set_params:7 of
msgid "**p**"
msgstr ""

#: bayesml.categorical._categorical.GenModel.set_params:8 of
msgid "a real vector :math:`p \\in [0, 1]^d`, by default None."
msgstr ""

#: bayesml.categorical._categorical.GenModel.get_params:10 of
msgid "**params**"
msgstr ""

#: bayesml.categorical._categorical.GenModel.get_params:11 of
#, python-brace-format
msgid "``{\"theta_vec\":self.theta_vec}``"
msgstr ""

#: bayesml.categorical._categorical.GenModel.gen_sample:7
#: bayesml.categorical._categorical.GenModel.save_sample:12
#: bayesml.categorical._categorical.GenModel.visualize_model:7 of
msgid "**sample_size**"
msgstr ""

#: bayesml.categorical._categorical.GenModel.gen_sample:8
#: bayesml.categorical._categorical.GenModel.save_sample:13 of
msgid "A positive integer"
msgstr ""

#: bayesml.categorical._categorical.GenModel.gen_sample:10
#: bayesml.categorical._categorical.GenModel.save_sample:15
#: bayesml.categorical._categorical.LearnModel.fit:19
#: bayesml.categorical._categorical.LearnModel.make_prediction:11
#: bayesml.categorical._categorical.LearnModel.pred_and_update:15
#: bayesml.categorical._categorical.LearnModel.predict:11
#: bayesml.categorical._categorical.LearnModel.update_posterior:14 of
msgid "**onehot**"
msgstr ""

#: bayesml.categorical._categorical.GenModel.gen_sample:-1
#: bayesml.categorical._categorical.GenModel.save_sample:-1
#: bayesml.categorical._categorical.LearnModel.estimate_params:-1
#: bayesml.categorical._categorical.LearnModel.fit:-1
#: bayesml.categorical._categorical.LearnModel.make_prediction:-1
#: bayesml.categorical._categorical.LearnModel.pred_and_update:-1
#: bayesml.categorical._categorical.LearnModel.predict:-1
#: bayesml.categorical._categorical.LearnModel.update_posterior:-1 of
msgid "bool, optional"
msgstr ""

#: bayesml.categorical._categorical.GenModel.gen_sample:11
#: bayesml.categorical._categorical.GenModel.save_sample:16 of
msgid "If True, a generated sample will be one-hot encoded,  by default True."
msgstr ""

#: bayesml.categorical._categorical.GenModel.gen_sample:18
#: bayesml.categorical._categorical.LearnModel.fit:12
#: bayesml.categorical._categorical.LearnModel.pred_and_update:7
#: bayesml.categorical._categorical.LearnModel.update_posterior:7 of
msgid "**x**"
msgstr ""

#: bayesml.categorical._categorical.GenModel.gen_sample:-1 of
msgid "numpy ndarray"
msgstr ""

#: bayesml.categorical._categorical.GenModel.gen_sample:19 of
msgid ""
"An non-negative int array. If onehot option is True, its shape will be  "
"``(sample_size,c_degree)`` and each row will be a one-hot vector.  If "
"onehot option is False, its shape will be ``(sample_size,)``  and each "
"element will be smaller than self.c_degree."
msgstr ""

#: bayesml.categorical._categorical.GenModel.save_sample:4 of
msgid "It is saved as a NpzFile with keyword: \"x\"."
msgstr ""

#: bayesml.categorical._categorical.GenModel.save_sample:8 of
msgid "**filename**"
msgstr ""

#: bayesml.categorical._categorical.GenModel.save_sample:-1 of
msgid "str"
msgstr ""

#: bayesml.categorical._categorical.GenModel.save_sample:9 of
msgid ""
"The filename to which the sample is saved. ``.npz`` will be appended if "
"it isn't there."
msgstr ""

#: bayesml.categorical._categorical.GenModel.save_sample:31 of
msgid ":obj:`numpy.savez_compressed`"
msgstr ""

#: bayesml.categorical._categorical.GenModel.visualize_model:-1 of
msgid "int, optional"
msgstr ""

#: bayesml.categorical._categorical.GenModel.visualize_model:8 of
msgid "A positive integer, by default 20"
msgstr ""

#: bayesml.categorical._categorical.GenModel.visualize_model:10 of
msgid "**sample_num**"
msgstr ""

#: bayesml.categorical._categorical.GenModel.visualize_model:11 of
msgid "A positive integer, by default 5"
msgstr ""

#: bayesml.categorical._categorical.GenModel.visualize_model:26
#: bayesml.categorical._categorical.LearnModel.visualize_posterior:19 of
msgid "Examples"
msgstr ""

#: bayesml.categorical._categorical.LearnModel:1 of
msgid ""
"Bases: :py:class:`~bayesml.base.Posterior`, "
":py:class:`~bayesml.base.PredictiveMixin`"
msgstr ""

#: bayesml.categorical._categorical.LearnModel:2 of
msgid "The posterior distribution and the predictive distribution."
msgstr ""

#: bayesml.categorical._categorical.LearnModel:10
#: bayesml.categorical._categorical.LearnModel.set_h0_params:7 of
msgid "**h0_alpha_vec**"
msgstr ""

#: bayesml.categorical._categorical.LearnModel:-1 of
msgid "numpy.ndarray, optional"
msgstr ""

#: bayesml.categorical._categorical.LearnModel of
msgid "Attributes"
msgstr ""

#: bayesml.categorical._categorical.LearnModel:16
#: bayesml.categorical._categorical.LearnModel.set_hn_params:7 of
msgid "**hn_alpha_vec**"
msgstr ""

#: bayesml.categorical._categorical.LearnModel:-1
#: bayesml.categorical._categorical.LearnModel.fit:-1
#: bayesml.categorical._categorical.LearnModel.predict_proba:-1
#: bayesml.categorical._categorical.LearnModel.update_posterior:-1 of
msgid "numpy.ndarray"
msgstr ""

#: bayesml.categorical._categorical.LearnModel:17 of
msgid "a vector of positive real numbers"
msgstr ""

#: bayesml.categorical._categorical.LearnModel:19 of
msgid "**p_theta_vec**"
msgstr ""

#: bayesml.categorical._categorical.LearnModel:20 of
msgid "a real vector in :math:`[0, 1]^d`"
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`calc_log_marginal_likelihood "
"<bayesml.categorical.LearnModel.calc_log_marginal_likelihood>`\\ \\(\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.calc_log_marginal_likelihood:2
#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid "Calculate log marginal likelihood"
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`calc_pred_dist "
"<bayesml.categorical.LearnModel.calc_pred_dist>`\\ \\(\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.calc_pred_dist:2
#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid "Calculate the parameters of the predictive distribution."
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`estimate_params "
"<bayesml.categorical.LearnModel.estimate_params>`\\ \\(\\[loss\\, "
"dict\\_out\\]\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.estimate_params:2
#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
"Estimate the parameter of the stochastic data generative model under the "
"given criterion."
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`fit <bayesml.categorical.LearnModel.fit>`\\ \\(x\\[\\, "
"onehot\\]\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.fit:2
#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid "Fit the model to the data."
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`get_constants <bayesml.categorical.LearnModel.get_constants>`\\ "
"\\(\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.get_constants:2
#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid "Get constants of LearnModel."
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`get_h0_params <bayesml.categorical.LearnModel.get_h0_params>`\\ "
"\\(\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.get_h0_params:2
#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
"Get the initial values of the hyperparameters of the posterior "
"distribution."
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`get_hn_params <bayesml.categorical.LearnModel.get_hn_params>`\\ "
"\\(\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.get_hn_params:2
#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid "Get the hyperparameters of the posterior distribution."
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`get_p_params <bayesml.categorical.LearnModel.get_p_params>`\\ "
"\\(\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.get_p_params:2
#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid "Get the parameters of the predictive distribution."
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`load_h0_params "
"<bayesml.categorical.LearnModel.load_h0_params>`\\ \\(filename\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid "Load the hyperparameters to h0_params."
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`load_hn_params "
"<bayesml.categorical.LearnModel.load_hn_params>`\\ \\(filename\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid "Load the hyperparameters to hn_params."
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`make_prediction "
"<bayesml.categorical.LearnModel.make_prediction>`\\ \\(\\[loss\\, "
"onehot\\]\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.make_prediction:2
#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid "Predict a new data point under the given criterion."
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`overwrite_h0_params "
"<bayesml.categorical.LearnModel.overwrite_h0_params>`\\ \\(\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
"Overwrite the initial values of the hyperparameters of the posterior "
"distribution by the learned values."
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`pred_and_update "
"<bayesml.categorical.LearnModel.pred_and_update>`\\ \\(x\\[\\, loss\\, "
"onehot\\]\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.pred_and_update:2
#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid "Predict a new data point and update the posterior sequentially."
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`predict <bayesml.categorical.LearnModel.predict>`\\ "
"\\(\\[onehot\\]\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.predict:2
#: bayesml.categorical._categorical.LearnModel.predict_proba:2
#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid "Predict the next data point."
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`predict_proba <bayesml.categorical.LearnModel.predict_proba>`\\ "
"\\(\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`reset_hn_params "
"<bayesml.categorical.LearnModel.reset_hn_params>`\\ \\(\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
"Reset the hyperparameters of the posterior distribution to their initial "
"values."
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`save_h0_params "
"<bayesml.categorical.LearnModel.save_h0_params>`\\ \\(filename\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`save_hn_params "
"<bayesml.categorical.LearnModel.save_hn_params>`\\ \\(filename\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`set_h0_params <bayesml.categorical.LearnModel.set_h0_params>`\\ "
"\\(\\[h0\\_alpha\\_vec\\]\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`set_hn_params <bayesml.categorical.LearnModel.set_hn_params>`\\ "
"\\(\\[hn\\_alpha\\_vec\\]\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.set_hn_params:2
#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid "Set updated values of the hyperparameter of the posterior distribution."
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`update_posterior "
"<bayesml.categorical.LearnModel.update_posterior>`\\ \\(x\\[\\, "
"onehot\\]\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.update_posterior:2
#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
"Update the hyperparameters of the posterior distribution using traning "
"data."
msgstr ""

#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid ""
":py:obj:`visualize_posterior "
"<bayesml.categorical.LearnModel.visualize_posterior>`\\ \\(\\)"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.visualize_posterior:2
#: bayesml.categorical._categorical.LearnModel:60:<autosummary>:1 of
msgid "Visualize the posterior distribution for the parameter."
msgstr ""

#: bayesml.categorical._categorical.LearnModel.get_h0_params:10 of
msgid "**h0_params**"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.get_h0_params:-1 of
#, python-brace-format
msgid "dict of {str: float, numpy.ndarray}"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.get_h0_params:11 of
msgid "``\"h0_alpha_vec\"`` : The value of ``self.h0_alpha_vec``"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.get_hn_params:10 of
msgid "**hn_params**"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.get_hn_params:-1
#: bayesml.categorical._categorical.LearnModel.get_p_params:-1 of
#, python-brace-format
msgid "dict of {str: numpy.ndarray}"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.get_hn_params:11 of
msgid "``\"hn_alpha_vec\"`` : The value of ``self.hn_alpha_vec``"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.fit:13
#: bayesml.categorical._categorical.LearnModel.update_posterior:8 of
msgid ""
"A non-negative int array. If onehot option is True,  its shape must be "
"``(sample_size,c_degree)`` and  each row must be a one-hot vector. If "
"onehot option is False,  its shape must be ``(sample_size,)`` and each "
"element must be  smaller than ``self.c_degree``."
msgstr ""

#: bayesml.categorical._categorical.LearnModel.fit:20
#: bayesml.categorical._categorical.LearnModel.update_posterior:15 of
msgid "If True, the input sample must be one-hot encoded,  by default True."
msgstr ""

#: bayesml.categorical._categorical.LearnModel.estimate_params:7
#: bayesml.categorical._categorical.LearnModel.make_prediction:7
#: bayesml.categorical._categorical.LearnModel.pred_and_update:11 of
msgid "**loss**"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.estimate_params:-1
#: bayesml.categorical._categorical.LearnModel.make_prediction:-1
#: bayesml.categorical._categorical.LearnModel.pred_and_update:-1 of
msgid "str, optional"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.estimate_params:8
#: bayesml.categorical._categorical.LearnModel.make_prediction:8
#: bayesml.categorical._categorical.LearnModel.pred_and_update:12 of
msgid ""
"Loss function underlying the Bayes risk function, by default \"squared\"."
" This function supports \"squared\", \"0-1\", and \"KL\"."
msgstr ""

#: bayesml.categorical._categorical.LearnModel.estimate_params:11 of
msgid "**dict_out**"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.estimate_params:12 of
msgid "If ``True``, output will be a dict, by default ``False``."
msgstr ""

#: bayesml.categorical._categorical.LearnModel.estimate_params:18 of
msgid "**estimates**"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.estimate_params:-1 of
#, python-brace-format
msgid "{numpy ndarray, float, None, or rv_frozen}"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.estimate_params:19 of
msgid ""
"The estimated values under the given loss function. If it is not exist, "
"`None` will be returned. If the loss function is \"KL\", the posterior "
"distribution itself will be returned as rv_frozen object of scipy.stats."
msgstr ""

#: bayesml.categorical._categorical.LearnModel.estimate_params:32 of
msgid ":obj:`scipy.stats.rv_continuous`"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.estimate_params:34 of
msgid ":obj:`scipy.stats.rv_discrete`"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.get_p_params:10 of
msgid "**p_params**"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.get_p_params:11 of
msgid "``\"p_theta_vec\"`` : The value of ``self.p_theta_vec``"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.make_prediction:12 of
msgid ""
"If True, predected value under \"0-1\" loss will be one-hot encoded,  by "
"default True."
msgstr ""

#: bayesml.categorical._categorical.LearnModel.make_prediction:19
#: bayesml.categorical._categorical.LearnModel.pred_and_update:23 of
msgid "**Predicted_value**"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.make_prediction:-1 of
#, python-brace-format
msgid "{float, numpy.ndarray}"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.make_prediction:20 of
msgid ""
"The predicted value under the given loss function.  If the loss function "
"is \"KL\", the predictive distribution will be returned as 1-dimensional "
"numpy.ndarray that consists of occurence probabilities."
msgstr ""

#: bayesml.categorical._categorical.LearnModel.pred_and_update:-1 of
msgid "numpy.ndarray or int"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.pred_and_update:8 of
msgid ""
"If onehot option is True, 1-dimensional array whose length is "
"``c_degree``.  If onehot option is False, a non-negative integer."
msgstr ""

#: bayesml.categorical._categorical.LearnModel.pred_and_update:16 of
msgid ""
"If True, the input must be one-hot encoded and a predected value  under "
"\"0-1\" loss will be one-hot encoded, by default True."
msgstr ""

#: bayesml.categorical._categorical.LearnModel.pred_and_update:-1
#: bayesml.categorical._categorical.LearnModel.predict:-1 of
#, python-brace-format
msgid "{int, numpy.ndarray}"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.pred_and_update:24 of
msgid ""
"The predicted value under the given loss function.  If the loss function "
"is \"KL\", the predictive distribution itself will be returned as "
"numpy.ndarray."
msgstr ""

#: bayesml.categorical._categorical.LearnModel.calc_log_marginal_likelihood:10
#: of
msgid "**log_marginal_likelihood**"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.calc_log_marginal_likelihood:-1
#: of
msgid "float"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.calc_log_marginal_likelihood:11
#: of
msgid "The log marginal likelihood."
msgstr ""

#: bayesml.categorical._categorical.LearnModel.fit:4
#: bayesml.categorical._categorical.LearnModel.predict:4
#: bayesml.categorical._categorical.LearnModel.predict_proba:4 of
msgid "This function is a wrapper of the following functions:"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.fit:27 of
msgid "**self**"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.fit:-1 of
msgid "LearnModel"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.fit:28 of
msgid "The fitted model."
msgstr ""

#: bayesml.categorical._categorical.LearnModel.predict:12 of
msgid "If True, predected value will be one-hot encoded,  by default True."
msgstr ""

#: bayesml.categorical._categorical.LearnModel.predict:19 of
msgid "**predicted_value**"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.predict:20 of
msgid "The predicted value under the 0-1 loss function."
msgstr ""

#: bayesml.categorical._categorical.LearnModel.predict_proba:14 of
msgid "**predicted_distribution**"
msgstr ""

#: bayesml.categorical._categorical.LearnModel.predict_proba:15 of
msgid "The predicted distribution under the KL loss function."
msgstr ""

