# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, BayesML Developers
# This file is distributed under the same license as the BayesML package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: BayesML \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-21 23:58+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../bayesml.metatree.rst:2
msgid "bayesml.metatree package"
msgstr ""

#: ../../bayesml.metatree.rst:8
msgid "Module contents"
msgstr ""

#: bayesml.metatree:2 of
msgid "Stochastic Data Generative Model"
msgstr ""

#: bayesml.metatree:4 of
#, python-brace-format
msgid ""
":math:`\\boldsymbol{x}=[x_1, \\ldots, x_p, x_{p+1}, \\ldots , x_{p+q}]` :"
" an explanatory variable. The first :math:`p` variables are continuous. "
"The other :math:`q` variables are categorical."
msgstr ""

#: bayesml.metatree:5 of
#, python-brace-format
msgid ":math:`\\mathcal{Y}` : a space of an objective variable"
msgstr ""

#: bayesml.metatree:6 of
#, python-brace-format
msgid ":math:`y \\in \\mathcal{Y}` : an objective variable"
msgstr ""

#: bayesml.metatree:7 of
#, python-brace-format
msgid ":math:`D_\\mathrm{max} \\in \\mathbb{N}` : the maximum depth of trees"
msgstr ""

#: bayesml.metatree:8 of
#, python-brace-format
msgid ""
":math:`T_\\mathrm{max}` : the perfect tree where all the inner nodes have"
" the same number of child nodes and all the leaf nodes have the same "
"depth of :math:`D_\\mathrm{max}`"
msgstr ""

#: bayesml.metatree:9 of
#, python-brace-format
msgid ""
":math:`\\mathcal{S}_\\mathrm{max}` : the set of all the nodes of "
":math:`T_\\mathrm{max}`"
msgstr ""

#: bayesml.metatree:10 of
#, python-brace-format
msgid ":math:`s \\in \\mathcal{S}_\\mathrm{max}` : a node of a tree"
msgstr ""

#: bayesml.metatree:11 of
#, python-brace-format
msgid ""
":math:`\\mathcal{I}_\\mathrm{max} \\subset \\mathcal{S}_\\mathrm{max}` : "
"the set of all the inner nodes of :math:`T_\\mathrm{max}`"
msgstr ""

#: bayesml.metatree:12 of
#, python-brace-format
msgid ""
":math:`\\mathcal{L}_\\mathrm{max} \\subset \\mathcal{S}_\\mathrm{max}` : "
"the set of all the leaf nodes of :math:`T_\\mathrm{max}`"
msgstr ""

#: bayesml.metatree:13 of
#, python-brace-format
msgid ""
":math:`\\mathcal{T}` : the set of all the pruned subtrees of "
":math:`T_\\mathrm{max}`"
msgstr ""

#: bayesml.metatree:14 of
#, python-brace-format
msgid ":math:`T \\in \\mathcal{T}` : a pruned subtree of :math:`T_\\mathrm{max}`"
msgstr ""

#: bayesml.metatree:15 of
#, python-brace-format
msgid ":math:`\\mathcal{I}_T` : the set of all the inner nodes of :math:`T`"
msgstr ""

#: bayesml.metatree:16 of
#, python-brace-format
msgid ":math:`\\mathcal{L}_T` : the set of all the leaf nodes of :math:`T`"
msgstr ""

#: bayesml.metatree:17 of
msgid ""
":math:`\\boldsymbol{k}=(k_s)_{s \\in \\mathcal{I}_\\mathrm{max}}` : "
"indices of the features assigned to inner nodes, i.e., :math:`k_s \\in "
"\\{1, 2,\\ldots,p+q\\}`. If :math:`k_s \\leq p`, the node :math:`s` has a"
" threshold."
msgstr ""

#: bayesml.metatree:18 of
msgid ""
":math:`\\mathcal{K}=\\{ 1, 2, \\ldots , p+q "
"\\}^{|\\mathcal{I}_\\mathrm{max}|}` : the set of all "
":math:`\\boldsymbol{k}`"
msgstr ""

#: bayesml.metatree:19 of
msgid ""
":math:`\\boldsymbol{\\theta}=(\\theta_s)_{s \\in \\mathcal{S}}` : "
"parameters assigned to the nodes"
msgstr ""

#: bayesml.metatree:20 of
msgid ""
":math:`s_{\\boldsymbol{k},T}(\\boldsymbol{x}) \\in \\mathcal{L}_T` : a "
"leaf node which :math:`\\boldsymbol{x}` reaches under :math:`T` and "
":math:`\\boldsymbol{k}`"
msgstr ""

#: bayesml.metatree:22 of
msgid ""
"p(y | \\boldsymbol{x}, \\boldsymbol{\\theta}, T, \\boldsymbol{k})=p(y | "
"\\theta_{s_{\\boldsymbol{k},T}(\\boldsymbol{x})})\n"
"\n"
msgstr ""

#: bayesml.metatree:26 of
msgid "Prior Distribution"
msgstr ""

#: bayesml.metatree:28 of
#, python-brace-format
msgid ""
":math:`g_s \\in [0,1]` : a hyperparameter assigned to each node :math:`s "
"\\in \\mathcal{S}_\\mathrm{max}`. For any leaf node :math:`s` of "
":math:`T_\\mathrm{max}`, we assume :math:`g_s=0`."
msgstr ""

#: bayesml.metatree:30 of
msgid ""
"p(\\boldsymbol{k}) &= \\frac{1}{|\\mathcal{K}|} = \\left( \\frac{1}{p+q} "
"\\right)^{|\\mathcal{I}_\\mathrm{max}|}, \\\\\n"
"p(T) &= \\prod_{s \\in \\mathcal{I}_T} g_s \\prod_{s' \\in "
"\\mathcal{L}_T} (1-g_{s'}).\n"
"\n"
msgstr ""

#: bayesml.metatree:34 of
msgid ""
"The prior distribution of the parameter :math:`\\theta_s` is assumed to "
"be a conjugate prior distribution for :math:`p(y | \\theta_s)` and "
"independent for each node."
msgstr ""

#: bayesml.metatree:37 of
msgid "Posterior Distribution"
msgstr ""

#: bayesml.metatree:39 of
msgid "The posterior distribution is approximated as follows:"
msgstr ""

#: bayesml.metatree:41 of
#, python-brace-format
msgid ":math:`n \\in \\mathbb{N}` : a sample size"
msgstr ""

#: bayesml.metatree:42 of
msgid ""
":math:`\\boldsymbol{x}^n = \\{ \\boldsymbol{x}_1, \\boldsymbol{x}_2, "
"\\ldots, \\boldsymbol{x}_n \\}`"
msgstr ""

#: bayesml.metatree:43 of
msgid ""
":math:`\\boldsymbol{x}_{s, \\boldsymbol{k}}` : the explanatory variables "
"of the data points that pass through :math:`s` under "
":math:`\\boldsymbol{k}`."
msgstr ""

#: bayesml.metatree:44 of
#, python-brace-format
msgid ":math:`y^n = \\{ y_1, y_2, \\ldots, y_n \\}`"
msgstr ""

#: bayesml.metatree:45 of
msgid ""
":math:`y_{s, \\boldsymbol{k}}` : the objective variables of the data "
"points that pass through :math:`s` under :math:`\\boldsymbol{k}`."
msgstr ""

#: bayesml.metatree:47 of
#, python-brace-format
msgid ""
"First, the posterior distribution :math:`p(\\boldsymbol{k}, T, "
"\\boldsymbol{\\theta} | \\boldsymbol{x}^n, y^n)` can be decomposed as "
"follows:"
msgstr ""

#: bayesml.metatree:49 of
#, python-brace-format
msgid ""
"p(\\boldsymbol{k}, T, \\boldsymbol{\\theta} | \\boldsymbol{x}^n, y^n) = "
"p(\\boldsymbol{k} | \\boldsymbol{x}^n, y^n) p(T | \\boldsymbol{x}^n, y^n,"
" \\boldsymbol{k}) p(\\boldsymbol{\\theta} | \\boldsymbol{x}^n, y^n, "
"\\boldsymbol{k}, T).\n"
"\n"
msgstr ""

#: bayesml.metatree:52 of
#, python-brace-format
msgid ""
"For :math:`\\boldsymbol{\\theta}`, we can exactly calculate the posterior"
" distribution :math:`p(\\boldsymbol{\\theta} | \\boldsymbol{x}^n, y^n, "
"\\boldsymbol{k}, T)` because we assumed the conjugate prior distribution."
msgstr ""

#: bayesml.metatree:54 of
#, python-brace-format
msgid ""
"Also for :math:`T`, we can exactly calculate the posterior distribution "
":math:`p(T | \\boldsymbol{x}^n, y^n, \\boldsymbol{k})` by using the "
"concept called a meta-tree.  The meta-tree is not a tree but a set of "
"trees where all the trees have the same feature assignment "
":math:`\\boldsymbol{k}` to their inner nodes.  The posterior distribution"
" of the trees over the meta-tree defined by :math:`\\boldsymbol{k}` is as"
" follows:"
msgstr ""

#: bayesml.metatree:58 of
msgid ""
"p(T | \\boldsymbol{x}^n, y^n, \\boldsymbol{k}) = \\prod_{s \\in "
"\\mathcal{I}_T} g_{s|\\boldsymbol{x}^n, y^n, \\boldsymbol{k}} \\prod_{s' "
"\\in \\mathcal{L}_T} (1-g_{s'|\\boldsymbol{x}^n, y^n, \\boldsymbol{k}}),"
"\n"
"\n"
msgstr ""

#: bayesml.metatree:61 of
msgid ""
"where :math:`g_{s|\\boldsymbol{x}^n, y^n, \\boldsymbol{k}} \\in [0,1]` "
"can be calculated from :math:`\\boldsymbol{x}^n`, :math:`y^n`, and "
":math:`\\boldsymbol{k}` as follows:"
msgstr ""

#: bayesml.metatree:63 of
msgid ""
"g_{s|\\boldsymbol{x}^n, y^n, \\boldsymbol{k}} =\n"
"\\begin{cases}\n"
"    \\frac{g_s \\prod_{s' \\in \\mathrm{Ch}(s)}q(y_{s', "
"\\boldsymbol{k}}|\\boldsymbol{x}_{s', \\boldsymbol{k}}, s', "
"\\boldsymbol{k})}{q(y_{s, \\boldsymbol{k}}|\\boldsymbol{x}_{s, "
"\\boldsymbol{k}}, s, \\boldsymbol{k})}, & s \\in "
"\\mathcal{I}_\\mathrm{max},\\\\\n"
"    g_s, & \\mathrm{otherwise},\n"
"\\end{cases}\n"
"\n"
msgstr ""

#: bayesml.metatree:70 of
msgid ""
"where :math:`\\mathrm{Ch}(s)` denotes the set of child nodes of :math:`s`"
" on :math:`T_\\mathrm{max}` and :math:`q(y_{s, "
"\\boldsymbol{k}}|\\boldsymbol{x}_{s, \\boldsymbol{k}}, s, "
"\\boldsymbol{k})` is defined for any :math:`s \\in "
"\\mathcal{S}_\\mathrm{max}` as follows."
msgstr ""

#: bayesml.metatree:72 of
msgid ""
"&q(y_{s, \\boldsymbol{k}}|\\boldsymbol{x}_{s, \\boldsymbol{k}}, s, "
"\\boldsymbol{k}) =\n"
"\\begin{cases}\n"
"    (1-g_s) f(y_{s, \\boldsymbol{k}} | \\boldsymbol{x}_{s, "
"\\boldsymbol{k}}, s, \\boldsymbol{k}) \\\\\n"
"    \\qquad {}+ g_s \\prod_{s' \\in \\mathrm{Ch}(s)} q(y_{s', "
"\\boldsymbol{k}} | \\boldsymbol{x}_{s', \\boldsymbol{k}}, s', "
"\\boldsymbol{k}), & s \\in \\mathcal{I}_\\mathrm{max},\\\\\n"
"    f(y_{s, \\boldsymbol{k}} | \\boldsymbol{x}_{s, \\boldsymbol{k}}, s, "
"\\boldsymbol{k}), & \\mathrm{otherwise}.\n"
"\\end{cases}\n"
"\n"
msgstr ""

#: bayesml.metatree:80 of
msgid ""
"Here, :math:`f(y_{s, \\boldsymbol{k}} | \\boldsymbol{x}_{s, "
"\\boldsymbol{k}}, s, \\boldsymbol{k})` is defined as follows:"
msgstr ""

#: bayesml.metatree:82 of
msgid ""
"f(y_{s, \\boldsymbol{k}} | \\boldsymbol{x}_{s, \\boldsymbol{k}}, s, "
"\\boldsymbol{k}) = \\int p(y_{s, \\boldsymbol{k}} | \\boldsymbol{x}_{s, "
"\\boldsymbol{k}}, \\theta_s) p(\\theta_s) \\mathrm{d}\\theta_s.\n"
"\n"
msgstr ""

#: bayesml.metatree:85 of
#, python-brace-format
msgid ""
"For :math:`\\boldsymbol{k}`, there are two algirithms to approximate the "
"posterior distribution :math:`p(\\boldsymbol{k} | \\boldsymbol{x}^n, "
"y^n)`: the meta-tree random forest (MTRF) and the meta-tree Markov chain "
"Monte Carlo (MTMCMC) method."
msgstr ""

#: bayesml.metatree:88 of
msgid "Approximation by MTRF"
msgstr ""

#: bayesml.metatree:90 of
msgid ""
"In MTRF, we first construct a set of feature assignment vectors "
":math:`\\mathcal{K}' = \\{\\boldsymbol{k}_1, \\boldsymbol{k}_2, \\ldots, "
"\\boldsymbol{k}_B\\}` by using the usual (non-Bayesian) random forest "
"algorithm. Next, for :math:`\\boldsymbol{k} \\in \\mathcal{K}`, we "
"approximate the posterior distribution :math:`p(\\boldsymbol{k} | "
"\\boldsymbol{x}^n, y^n)` as follows:"
msgstr ""

#: bayesml.metatree:93 of
msgid ""
"p(\\boldsymbol{k} | \\boldsymbol{x}^n, y^n) \\approx "
"\\tilde{p}(\\boldsymbol{k} | \\boldsymbol{x}^n, y^n) \\propto "
"\\begin{cases}\n"
"    q(y_{s_\\lambda, \\boldsymbol{k}}|\\boldsymbol{x}_{s_\\lambda, "
"\\boldsymbol{k}}, s_\\lambda, \\boldsymbol{k}), & \\boldsymbol{k} \\in "
"\\mathcal{K}',\\\\\n"
"    0, & \\mathrm{otherwise}.\n"
"\\end{cases}\n"
"\n"
msgstr ""

#: bayesml.metatree:99 of
#, python-brace-format
msgid "where :math:`s_{\\lambda}` is the root node of :math:`T_\\mathrm{max}`."
msgstr ""

#: bayesml.metatree:101 bayesml.metatree:131 of
msgid "The predictive distribution is approximated as follows:"
msgstr ""

#: bayesml.metatree:103 of
msgid ""
"p(y_{n+1}| \\boldsymbol{x}_{n+1}, \\boldsymbol{x}^n, y^n) = "
"\\sum_{\\boldsymbol{k} \\in \\mathcal{K}'} \\tilde{p}(\\boldsymbol{k} | "
"\\boldsymbol{x}^n, y^n) "
"q(y_{n+1}|\\boldsymbol{x}_{n+1},\\boldsymbol{x}^n, y^n, s_\\lambda, "
"\\boldsymbol{k}),\n"
"\n"
msgstr ""

#: bayesml.metatree:106 of
msgid ""
"where :math:`q(y_{n+1}|\\boldsymbol{x}_{n+1},\\boldsymbol{x}^n, y^n, "
"s_\\lambda, \\boldsymbol{k})` is calculated in a similar manner to "
":math:`q(y_{s_\\lambda, \\boldsymbol{k}}|\\boldsymbol{x}_{s_\\lambda, "
"\\boldsymbol{k}}, s_\\lambda, \\boldsymbol{k})`."
msgstr ""

#: bayesml.metatree:108 of
msgid "The expectation of the predictive distribution is approximated as follows."
msgstr ""

#: bayesml.metatree:110 of
msgid ""
"\\mathbb{E}_{p(y_{n+1}| \\boldsymbol{x}_{n+1}, \\boldsymbol{x}^n, y^n)} "
"[Y_{n+1}| \\boldsymbol{x}_{n+1}, \\boldsymbol{x}^n, y^n] = "
"\\sum_{\\boldsymbol{k} \\in \\mathcal{K}'} \\tilde{p}(\\boldsymbol{k} | "
"\\boldsymbol{x}^n, y^n) "
"\\mathbb{E}_{q(y_{n+1}|\\boldsymbol{x}_{n+1},\\boldsymbol{x}^n, y^n, "
"s_\\lambda, \\boldsymbol{k})} [Y_{n+1}| \\boldsymbol{x}_{n+1}, "
"\\boldsymbol{x}^n, y^n, \\boldsymbol{k}],\n"
"\n"
msgstr ""

#: bayesml.metatree:113 of
msgid "where the expectation for :math:`q` is recursively given as follows."
msgstr ""

#: bayesml.metatree:115 of
msgid ""
"&\\mathbb{E}_{q(y_{n+1}|\\boldsymbol{x}_{n+1},\\boldsymbol{x}^n, y^n, s, "
"\\boldsymbol{k})} [Y_{n+1} | \\boldsymbol{x}_{n+1}, \\boldsymbol{x}^n, "
"y^n, \\boldsymbol{k}] \\\\\n"
"&= \\begin{cases}\n"
"(1-g_{s|\\boldsymbol{x}^n, y^n, \\boldsymbol{k}}) "
"\\mathbb{E}_{f(y_{n+1}|\\boldsymbol{x}_{n+1},\\boldsymbol{x}^n, y^n, s, "
"\\boldsymbol{k})} [Y_{n+1} | \\boldsymbol{x}_{n+1}, \\boldsymbol{x}^n, "
"y^n, \\boldsymbol{k}] \\\\\n"
"\\qquad + g_{s|\\boldsymbol{x}^n, y^n, \\boldsymbol{k}} "
"\\mathbb{E}_{q(y_{n+1}|\\boldsymbol{x}_{n+1},\\boldsymbol{x}^n, y^n, "
"s_\\mathrm{child}, \\boldsymbol{k})} [Y_{n+1} | \\boldsymbol{x}_{n+1}, "
"\\boldsymbol{x}^n, y^n, \\boldsymbol{k}] ,& s \\in "
"\\mathcal{I}_\\mathrm{max},\\\\\n"
"\\mathbb{E}_{f(y_{n+1}|\\boldsymbol{x}_{n+1},\\boldsymbol{x}^n, y^n, s, "
"\\boldsymbol{k})} [Y_{n+1} | \\boldsymbol{x}_{n+1}, \\boldsymbol{x}^n, "
"y^n, \\boldsymbol{k}],& (\\mathrm{otherwise}).\n"
"\\end{cases}\n"
"\n"
msgstr ""

#: bayesml.metatree:123 of
msgid ""
"Here, :math:`f(y_{n+1}|\\boldsymbol{x}_{n+1},\\boldsymbol{x}^n, y^n, s, "
"\\boldsymbol{k})` is calculated in a similar manner to :math:`f(y_{s, "
"\\boldsymbol{k}} | \\boldsymbol{x}_{s, \\boldsymbol{k}}, s, "
"\\boldsymbol{k})` and :math:`s_\\mathrm{child}` is the child node of "
":math:`s` on the path from the root node to the leaf node "
":math:`s_{\\boldsymbol{k},T_\\mathrm{max}}(\\boldsymbol{x}_{n+1})`."
msgstr ""

#: bayesml.metatree:126 of
msgid "Approximation by MTMCMC"
msgstr ""

#: bayesml.metatree:128 of
msgid ""
"In MTMCMC method, we generate a sample :math:`\\boldsymbol{k}` from the "
"posterior distribution :math:`p(\\boldsymbol{k} | \\boldsymbol{x}^n, "
"y^n)` by a MCMC method, and the posterior distribution is approximated by"
" the empirical distribution of this sample. Let "
":math:`\\{\\boldsymbol{k}^{(t)}\\}_{t=1}^{t_\\mathrm{end}}` be the "
"obtained sample."
msgstr ""

#: bayesml.metatree:133 of
msgid ""
"p(y_{n+1}| \\boldsymbol{x}_{n+1}, \\boldsymbol{x}^n, y^n) = "
"\\frac{1}{t_\\mathrm{end}} \\sum_{t=1}^{t_\\mathrm{end}} "
"q(y_{n+1}|\\boldsymbol{x}_{n+1},\\boldsymbol{x}^n, y^n, s_\\lambda, "
"\\boldsymbol{k}^{(t)}).\n"
"\n"
msgstr ""

#: bayesml.metatree:136 of
msgid "The expectation of the predictive distribution is approximated as follows:"
msgstr ""

#: bayesml.metatree:138 of
msgid ""
"\\mathbb{E}_{p(y_{n+1}| \\boldsymbol{x}_{n+1}, \\boldsymbol{x}^n, y^n)} "
"[Y_{n+1}| \\boldsymbol{x}_{n+1}, \\boldsymbol{x}^n, y^n] = "
"\\frac{1}{t_\\mathrm{end}} \\sum_{t=1}^{t_\\mathrm{end}} "
"\\mathbb{E}_{q(y_{n+1}|\\boldsymbol{x}_{n+1},\\boldsymbol{x}^n, y^n, "
"s_\\lambda, \\boldsymbol{k}^{(t)})} [Y_{n+1}| \\boldsymbol{x}_{n+1}, "
"\\boldsymbol{x}^n, y^n, \\boldsymbol{k}^{(t)}].\n"
"\n"
msgstr ""

#: bayesml.metatree:142
#: bayesml.metatree._metatree.LearnModel.update_posterior:145 of
msgid "References"
msgstr ""

#: bayesml.metatree:144 of
msgid ""
"Dobashi, N.; Saito, S.; Nakahara, Y.; Matsushima, T. Meta-Tree Random "
"Forest: Probabilistic Data-Generative Model and Bayes Optimal Prediction."
" *Entropy* 2021, 23, 768. https://doi.org/10.3390/e23060768"
msgstr ""

#: bayesml.metatree:145 of
msgid ""
"Nakahara, Y.; Saito, S.; Kamatsuka, A.; Matsushima, T. Probability "
"Distribution on Full Rooted Trees. *Entropy* 2022, 24, 328. "
"https://doi.org/10.3390/e24030328"
msgstr ""

#: bayesml.metatree:146 of
msgid ""
"Nakahara, Y.; Saito, S.; Ichijo, N.; Kazama, K.; Matsushima, T. Bayesian "
"Decision Theory on Decision Trees: Uncertainty Evaluation and "
"Interpretability. *Proceedings of The 28th International Conference on "
"Artificial Intelligence and Statistics*, in *Proceedings of Machine "
"Learning Research* 2025, 258:1045-1053 Available from "
"https://proceedings.mlr.press/v258/nakahara25a.html."
msgstr ""

#: bayesml.metatree._metatree.GenModel:1 of
msgid "Bases: :py:class:`~bayesml.base.Generative`"
msgstr ""

#: bayesml.metatree._metatree.GenModel:2 of
msgid "The stochastice data generative model and the prior distribution"
msgstr ""

#: bayesml.metatree._metatree.GenModel
#: bayesml.metatree._metatree.GenModel.gen_params
#: bayesml.metatree._metatree.GenModel.gen_sample
#: bayesml.metatree._metatree.GenModel.save_sample
#: bayesml.metatree._metatree.GenModel.set_h_params
#: bayesml.metatree._metatree.GenModel.set_params
#: bayesml.metatree._metatree.GenModel.visualize_model
#: bayesml.metatree._metatree.LearnModel
#: bayesml.metatree._metatree.LearnModel.calc_pred_density
#: bayesml.metatree._metatree.LearnModel.calc_pred_dist
#: bayesml.metatree._metatree.LearnModel.estimate_params
#: bayesml.metatree._metatree.LearnModel.fit
#: bayesml.metatree._metatree.LearnModel.make_prediction
#: bayesml.metatree._metatree.LearnModel.pred_and_update
#: bayesml.metatree._metatree.LearnModel.predict
#: bayesml.metatree._metatree.LearnModel.predict_proba
#: bayesml.metatree._metatree.LearnModel.set_h0_params
#: bayesml.metatree._metatree.LearnModel.set_hn_params
#: bayesml.metatree._metatree.LearnModel.update_posterior
#: bayesml.metatree._metatree.LearnModel.visualize_posterior of
msgid "Parameters"
msgstr ""

#: bayesml.metatree._metatree.GenModel:7
#: bayesml.metatree._metatree.LearnModel:7 of
msgid "**c_dim_continuous**"
msgstr ""

#: bayesml.metatree._metatree.GenModel:-1
#: bayesml.metatree._metatree.LearnModel:-1 of
msgid "int"
msgstr ""

#: bayesml.metatree._metatree.GenModel:8 bayesml.metatree._metatree.GenModel:11
#: bayesml.metatree._metatree.LearnModel:8
#: bayesml.metatree._metatree.LearnModel:11 of
msgid "A non-negative integer"
msgstr ""

#: bayesml.metatree._metatree.GenModel:10
#: bayesml.metatree._metatree.LearnModel:10 of
msgid "**c_dim_categorical**"
msgstr ""

#: bayesml.metatree._metatree.GenModel:13
#: bayesml.metatree._metatree.LearnModel:16 of
msgid "**c_num_children_vec**"
msgstr ""

#: bayesml.metatree._metatree.GenModel:-1
#: bayesml.metatree._metatree.GenModel.gen_sample:-1
#: bayesml.metatree._metatree.GenModel.save_sample:-1
#: bayesml.metatree._metatree.GenModel.set_h_params:-1
#: bayesml.metatree._metatree.GenModel.visualize_model:-1
#: bayesml.metatree._metatree.LearnModel:-1
#: bayesml.metatree._metatree.LearnModel.calc_pred_dist:-1
#: bayesml.metatree._metatree.LearnModel.fit:-1
#: bayesml.metatree._metatree.LearnModel.pred_and_update:-1
#: bayesml.metatree._metatree.LearnModel.predict:-1
#: bayesml.metatree._metatree.LearnModel.predict_proba:-1
#: bayesml.metatree._metatree.LearnModel.set_h0_params:-1
#: bayesml.metatree._metatree.LearnModel.set_hn_params:-1
#: bayesml.metatree._metatree.LearnModel.update_posterior:-1 of
msgid "numpy.ndarray, optional"
msgstr ""

#: bayesml.metatree._metatree.GenModel:14
#: bayesml.metatree._metatree.LearnModel:17 of
msgid ""
"A vector of positive integers whose length is  "
"``c_dim_continuous+c_dim_categorical``, by default [2,2,...,2]. The first"
" ``c_dim_continuous`` elements represent  the numbers of children of "
"continuous features at  inner nodes. The other ``c_dim_categorial`` "
"elements  represent those of categorical features. If a single integer is"
" input, it will be broadcasted."
msgstr ""

#: bayesml.metatree._metatree.GenModel:22
#: bayesml.metatree._metatree.LearnModel:13 of
msgid "**c_max_depth**"
msgstr ""

#: bayesml.metatree._metatree.GenModel:-1
#: bayesml.metatree._metatree.GenModel.gen_sample:-1
#: bayesml.metatree._metatree.GenModel.save_sample:-1
#: bayesml.metatree._metatree.GenModel.visualize_model:-1
#: bayesml.metatree._metatree.LearnModel:-1
#: bayesml.metatree._metatree.LearnModel.visualize_posterior:-1 of
msgid "int, optional"
msgstr ""

#: bayesml.metatree._metatree.GenModel:23
#: bayesml.metatree._metatree.LearnModel:14 of
msgid "A positive integer, by default 2"
msgstr ""

#: bayesml.metatree._metatree.GenModel:25
#: bayesml.metatree._metatree.LearnModel:25 of
msgid "**c_num_assignment_vec**"
msgstr ""

#: bayesml.metatree._metatree.GenModel:26
#: bayesml.metatree._metatree.LearnModel:26 of
msgid ""
"A vector of positive integers whose length is  "
"``c_dim_continuous+c_dim_categorical``.  The first ``c_dim_continuous`` "
"elements represent  the maximum assignment numbers of continuous features"
"  on a path. The other ``c_dim_categorial`` elements  represent those of "
"categorical features. If it  has a negative element (e.g., -1), the "
"corresponding  feature will be assigned any number of times.  By default "
"[-1,...,-1]."
msgstr ""

#: bayesml.metatree._metatree.GenModel:36
#: bayesml.metatree._metatree.LearnModel:36 of
msgid "**c_ranges**"
msgstr ""

#: bayesml.metatree._metatree.GenModel:37
#: bayesml.metatree._metatree.LearnModel:37 of
msgid ""
"A numpy.ndarray whose size is (c_dim_continuous,2). A threshold for the "
"``k``-th continuous feature will be  generated between ``c_ranges[k,0]`` "
"and ``c_ranges[k,1]``.  By default, [[-3,3],[-3,3],...,[-3,3]]."
msgstr ""

#: bayesml.metatree._metatree.GenModel:42
#: bayesml.metatree._metatree.LearnModel:42 of
msgid "**SubModel**"
msgstr ""

#: bayesml.metatree._metatree.GenModel:-1
#: bayesml.metatree._metatree.LearnModel:-1 of
msgid "class, optional"
msgstr ""

#: bayesml.metatree._metatree.GenModel:43
#: bayesml.metatree._metatree.LearnModel:43 of
msgid ""
"bernoulli, categorical, poisson, normal, exponential,  or "
"linearregression, by default bernoulli"
msgstr ""

#: bayesml.metatree._metatree.GenModel:46
#: bayesml.metatree._metatree.LearnModel:46 of
msgid "**sub_constants**"
msgstr ""

#: bayesml.metatree._metatree.GenModel:-1
#: bayesml.metatree._metatree.GenModel.set_h_params:-1
#: bayesml.metatree._metatree.LearnModel:-1
#: bayesml.metatree._metatree.LearnModel.fit:-1
#: bayesml.metatree._metatree.LearnModel.set_h0_params:-1
#: bayesml.metatree._metatree.LearnModel.set_hn_params:-1
#: bayesml.metatree._metatree.LearnModel.update_posterior:-1 of
msgid "dict, optional"
msgstr ""

#: bayesml.metatree._metatree.GenModel:47 of
#, python-brace-format
msgid "constants for self.SubModel.GenModel, by default {}"
msgstr ""

#: bayesml.metatree._metatree.GenModel:49
#: bayesml.metatree._metatree.GenModel.set_params:7 of
msgid "**root**"
msgstr ""

#: bayesml.metatree._metatree.GenModel:-1
#: bayesml.metatree._metatree.GenModel.set_params:-1 of
msgid "metatree._Node, optional"
msgstr ""

#: bayesml.metatree._metatree.GenModel:50 of
msgid "A root node of a meta-tree,  by default a tree consists of only one node."
msgstr ""

#: bayesml.metatree._metatree.GenModel:53
#: bayesml.metatree._metatree.GenModel.set_h_params:7 of
msgid "**h_k_weight_vec**"
msgstr ""

#: bayesml.metatree._metatree.GenModel:54
#: bayesml.metatree._metatree.LearnModel:50 of
msgid ""
"A vector of positive real numbers whose length is  "
"``c_dim_continuous+c_dim_categorical``,  by default [1,...,1]."
msgstr ""

#: bayesml.metatree._metatree.GenModel:58
#: bayesml.metatree._metatree.GenModel.set_h_params:12 of
msgid "**h_g**"
msgstr ""

#: bayesml.metatree._metatree.GenModel:-1
#: bayesml.metatree._metatree.GenModel.set_h_params:-1
#: bayesml.metatree._metatree.LearnModel:-1
#: bayesml.metatree._metatree.LearnModel.set_h0_params:-1
#: bayesml.metatree._metatree.LearnModel.set_hn_params:-1 of
msgid "float, optional"
msgstr ""

#: bayesml.metatree._metatree.GenModel:59
#: bayesml.metatree._metatree.LearnModel:55 of
msgid "A real number in :math:`[0, 1]`, by default 0.5"
msgstr ""

#: bayesml.metatree._metatree.GenModel:61
#: bayesml.metatree._metatree.GenModel.set_h_params:15 of
msgid "**sub_h_params**"
msgstr ""

#: bayesml.metatree._metatree.GenModel:62 of
#, python-brace-format
msgid "h_params for self.SubModel.GenModel, by default {}"
msgstr ""

#: bayesml.metatree._metatree.GenModel:64
#: bayesml.metatree._metatree.GenModel.set_h_params:18 of
msgid "**h_metatree_list**"
msgstr ""

#: bayesml.metatree._metatree.GenModel:-1
#: bayesml.metatree._metatree.GenModel.set_h_params:-1
#: bayesml.metatree._metatree.LearnModel:-1
#: bayesml.metatree._metatree.LearnModel.set_h0_params:-1
#: bayesml.metatree._metatree.LearnModel.set_hn_params:-1 of
msgid "list of metatree._Node, optional"
msgstr ""

#: bayesml.metatree._metatree.GenModel:65
#: bayesml.metatree._metatree.LearnModel:61 of
msgid "Root nodes of meta-trees, by default []"
msgstr ""

#: bayesml.metatree._metatree.GenModel:67
#: bayesml.metatree._metatree.GenModel.set_h_params:21 of
msgid "**h_metatree_prob_vec**"
msgstr ""

#: bayesml.metatree._metatree.GenModel:68 of
msgid ""
"A vector of real numbers in :math:`[0, 1]`  that represents prior "
"distribution of h_metatree_list,  by default uniform distribution Sum of "
"its elements must be 1.0."
msgstr ""

#: bayesml.metatree._metatree.GenModel:73 of
msgid "**seed**"
msgstr ""

#: bayesml.metatree._metatree.GenModel:-1 of
#, python-brace-format
msgid "{None, int}, optional"
msgstr ""

#: bayesml.metatree._metatree.GenModel:74 of
msgid "A seed to initialize numpy.random.default_rng(), by default None"
msgstr ""

#: bayesml.metatree._metatree.GenModel bayesml.metatree._metatree.LearnModel of
msgid "Attributes"
msgstr ""

#: bayesml.metatree._metatree.GenModel:79
#: bayesml.metatree._metatree.LearnModel:71 of
msgid "**c_dim_features: int**"
msgstr ""

#: bayesml.metatree._metatree.GenModel:80
#: bayesml.metatree._metatree.LearnModel:72 of
msgid "c_dim_continuous + c_dim_categorical"
msgstr ""

#: bayesml.metatree._metatree.GenModel:83
#: bayesml.metatree._metatree.LearnModel:93 of
msgid "Methods"
msgstr ""

#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid ""
":py:obj:`gen_params <bayesml.metatree.GenModel.gen_params>`\\ "
"\\(\\[feature\\_fix\\, threshold\\_fix\\, ...\\]\\)"
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_params:2
#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid "Generate the parameter from the prior distribution."
msgstr ""

#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid ""
":py:obj:`gen_sample <bayesml.metatree.GenModel.gen_sample>`\\ "
"\\(\\[sample\\_size\\, x\\_continuous\\, ...\\]\\)"
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_sample:2
#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid "Generate a sample from the stochastic data generative model."
msgstr ""

#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid ":py:obj:`get_constants <bayesml.metatree.GenModel.get_constants>`\\ \\(\\)"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_constants:2
#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid "Get constants of GenModel."
msgstr ""

#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid ":py:obj:`get_h_params <bayesml.metatree.GenModel.get_h_params>`\\ \\(\\)"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_h_params:2
#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1
#: bayesml.metatree._metatree.LearnModel.get_h0_params:2
#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid "Get the hyperparameters of the prior distribution."
msgstr ""

#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid ":py:obj:`get_params <bayesml.metatree.GenModel.get_params>`\\ \\(\\)"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_params:2
#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid "Get the parameter of the sthocastic data generative model."
msgstr ""

#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid ""
":py:obj:`load_h_params <bayesml.metatree.GenModel.load_h_params>`\\ "
"\\(filename\\)"
msgstr ""

#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid "Load the hyperparameters to h_params."
msgstr ""

#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid ""
":py:obj:`load_params <bayesml.metatree.GenModel.load_params>`\\ "
"\\(filename\\)"
msgstr ""

#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid "Load the parameters saved by ``save_params``."
msgstr ""

#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid ""
":py:obj:`save_h_params <bayesml.metatree.GenModel.save_h_params>`\\ "
"\\(filename\\)"
msgstr ""

#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1
#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid "Save the hyperparameters using python ``pickle`` module."
msgstr ""

#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid ""
":py:obj:`save_params <bayesml.metatree.GenModel.save_params>`\\ "
"\\(filename\\)"
msgstr ""

#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid "Save the parameters using python ``pickle`` module."
msgstr ""

#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid ""
":py:obj:`save_sample <bayesml.metatree.GenModel.save_sample>`\\ "
"\\(filename\\, sample\\_size\\[\\, x\\]\\)"
msgstr ""

#: bayesml.metatree._metatree.GenModel.save_sample:2
#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid "Save the generated sample as NumPy ``.npz`` format."
msgstr ""

#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid ""
":py:obj:`set_h_params <bayesml.metatree.GenModel.set_h_params>`\\ "
"\\(\\[h\\_k\\_weight\\_vec\\, h\\_g\\, ...\\]\\)"
msgstr ""

#: bayesml.metatree._metatree.GenModel.set_h_params:2
#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1
#: bayesml.metatree._metatree.LearnModel.set_h0_params:2
#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid "Set the hyperparameters of the prior distribution."
msgstr ""

#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid ""
":py:obj:`set_params <bayesml.metatree.GenModel.set_params>`\\ "
"\\(\\[root\\]\\)"
msgstr ""

#: bayesml.metatree._metatree.GenModel.set_params:2
#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid "Set the parameter of the sthocastic data generative model."
msgstr ""

#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid ""
":py:obj:`visualize_model <bayesml.metatree.GenModel.visualize_model>`\\ "
"\\(\\[filename\\, format\\, ...\\]\\)"
msgstr ""

#: bayesml.metatree._metatree.GenModel.visualize_model:2
#: bayesml.metatree._metatree.GenModel:111:<autosummary>:1 of
msgid "Visualize the stochastic data generative model and generated samples."
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_sample
#: bayesml.metatree._metatree.GenModel.get_constants
#: bayesml.metatree._metatree.GenModel.get_h_params
#: bayesml.metatree._metatree.GenModel.get_params
#: bayesml.metatree._metatree.LearnModel.calc_feature_importances
#: bayesml.metatree._metatree.LearnModel.calc_pred_density
#: bayesml.metatree._metatree.LearnModel.calc_pred_var
#: bayesml.metatree._metatree.LearnModel.estimate_params
#: bayesml.metatree._metatree.LearnModel.fit
#: bayesml.metatree._metatree.LearnModel.get_constants
#: bayesml.metatree._metatree.LearnModel.get_h0_params
#: bayesml.metatree._metatree.LearnModel.get_hn_params
#: bayesml.metatree._metatree.LearnModel.get_p_params
#: bayesml.metatree._metatree.LearnModel.make_prediction
#: bayesml.metatree._metatree.LearnModel.pred_and_update
#: bayesml.metatree._metatree.LearnModel.predict
#: bayesml.metatree._metatree.LearnModel.predict_proba of
msgid "Returns"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_constants:10
#: bayesml.metatree._metatree.LearnModel.get_constants:10 of
msgid "**constants**"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_constants:-1
#: bayesml.metatree._metatree.LearnModel.get_constants:-1 of
#, python-brace-format
msgid "dict of {str: int, numpy.ndarray}"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_constants:11
#: bayesml.metatree._metatree.LearnModel.get_constants:11 of
msgid "``\"c_dim_continuous\"`` : the value of ``self.c_dim_continuous``"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_constants:12
#: bayesml.metatree._metatree.LearnModel.get_constants:12 of
msgid "``\"c_dim_categorical\"`` : the value of ``self.c_dim_categorical``"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_constants:13
#: bayesml.metatree._metatree.LearnModel.get_constants:13 of
msgid "``\"c_num_children_vec\"`` : the value of ``self.c_num_children_vec``"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_constants:14
#: bayesml.metatree._metatree.LearnModel.get_constants:14 of
msgid "``\"c_max_depth\"`` : the value of ``self.c_max_depth``"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_constants:15
#: bayesml.metatree._metatree.LearnModel.get_constants:15 of
msgid "``\"c_num_assignment_vec\"`` : the value of ``self.c_num_assignment_vec``"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_constants:16
#: bayesml.metatree._metatree.LearnModel.get_constants:16 of
msgid "``\"c_ranges\"`` : the value of ``self.c_ranges``"
msgstr ""

#: bayesml.metatree._metatree.GenModel.set_h_params:8
#: bayesml.metatree._metatree.LearnModel.set_h0_params:8
#: bayesml.metatree._metatree.LearnModel.set_hn_params:8 of
msgid ""
"A vector of positive real numbers whose length is  "
"``c_dim_continuous+c_dim_categorical``,  by default None."
msgstr ""

#: bayesml.metatree._metatree.GenModel.set_h_params:13
#: bayesml.metatree._metatree.LearnModel.set_h0_params:13
#: bayesml.metatree._metatree.LearnModel.set_hn_params:13 of
msgid "A real number in :math:`[0, 1]`, by default None"
msgstr ""

#: bayesml.metatree._metatree.GenModel.set_h_params:16 of
msgid "h_params for self.SubModel.GenModel, by default None"
msgstr ""

#: bayesml.metatree._metatree.GenModel.set_h_params:19
#: bayesml.metatree._metatree.LearnModel.set_h0_params:19
#: bayesml.metatree._metatree.LearnModel.set_hn_params:19 of
msgid "Root nodes of meta-trees, by default None"
msgstr ""

#: bayesml.metatree._metatree.GenModel.set_h_params:22 of
msgid ""
"A vector of real numbers in :math:`[0, 1]`  that represents prior "
"distribution of h_metatree_list,  by default None. Sum of its elements "
"must be 1.0."
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_h_params:10
#: bayesml.metatree._metatree.LearnModel.visualize_posterior:17 of
msgid "**h_params**"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_h_params:-1
#: bayesml.metatree._metatree.LearnModel.get_h0_params:-1
#: bayesml.metatree._metatree.LearnModel.get_hn_params:-1 of
#, python-brace-format
msgid "dict of {str: float, list, dict, numpy.ndarray}"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_h_params:11 of
msgid "``\"h_k_weight_vec\"`` : the value of ``self.h_k_weight_vec``"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_h_params:12 of
msgid "``\"h_g\"`` : the value of ``self.h_g``"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_h_params:13 of
msgid "``\"sub_h_params\"`` : the value of ``self.sub_h_params``"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_h_params:14 of
msgid "``\"h_metatree_list\"`` : the value of ``self.h_metatree_list``"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_h_params:15 of
msgid "``\"h_metatree_prob_vec\"`` : the value of ``self.h_metatree_prob_vec``"
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_params:4 of
msgid "The generated vaule is set at ``self.root``."
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_params:8 of
msgid "**feature_fix**"
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_params:-1
#: bayesml.metatree._metatree.LearnModel.estimate_params:-1
#: bayesml.metatree._metatree.LearnModel.visualize_posterior:-1 of
msgid "bool, optional"
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_params:9 of
msgid ""
"If ``True``, feature assignment indices will be fixed, by default "
"``False``."
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_params:11 of
msgid "**threshold_fix**"
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_params:12 of
msgid ""
"If ``True``, thresholds for continuous features will be fixed, by default"
" ``False``.  If ``feature_fix`` is ``False``, ``threshold_fix`` must be "
"``False``."
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_params:15 of
msgid "**tree_fix**"
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_params:16 of
msgid ""
"If ``True``, tree shape will be fixed, by default ``False``.  If "
"``feature_fix`` is ``False``, ``tree_fix`` must be ``False``."
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_params:19 of
msgid "**threshold_type**"
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_params:-1 of
#, python-brace-format
msgid "{'even', 'random'}, optional"
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_params:20 of
msgid ""
"A type of threshold generating procedure, by default ``'even'`` If "
"``'even'``, self.c_ranges will be recursively divided by equal intervals."
"  if ``'random'``, self.c_ranges will be recursively divided by at random"
" intervals."
msgstr ""

#: bayesml.metatree._metatree.GenModel.set_params:8 of
msgid "A root node of a meta-tree, by default None."
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_params:10 of
msgid "**params**"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_params:-1 of
#, python-brace-format
msgid "dict of {str:metatree._Node}"
msgstr ""

#: bayesml.metatree._metatree.GenModel.get_params:11 of
msgid "``\"root\"`` : The value of ``self.root``."
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_sample:7
#: bayesml.metatree._metatree.GenModel.save_sample:12
#: bayesml.metatree._metatree.GenModel.visualize_model:14 of
msgid "**sample_size**"
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_sample:8
#: bayesml.metatree._metatree.GenModel.save_sample:13 of
msgid "A positive integer, by default ``None``"
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_sample:10
#: bayesml.metatree._metatree.GenModel.gen_sample:23
#: bayesml.metatree._metatree.GenModel.save_sample:15
#: bayesml.metatree._metatree.GenModel.visualize_model:17
#: bayesml.metatree._metatree.LearnModel.calc_pred_dist:7
#: bayesml.metatree._metatree.LearnModel.fit:12
#: bayesml.metatree._metatree.LearnModel.pred_and_update:7
#: bayesml.metatree._metatree.LearnModel.predict:11
#: bayesml.metatree._metatree.LearnModel.predict_proba:12
#: bayesml.metatree._metatree.LearnModel.update_posterior:7 of
msgid "**x_continuous**"
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_sample:11
#: bayesml.metatree._metatree.GenModel.save_sample:16
#: bayesml.metatree._metatree.GenModel.visualize_model:18
#: bayesml.metatree._metatree.LearnModel.calc_pred_dist:8
#: bayesml.metatree._metatree.LearnModel.fit:13
#: bayesml.metatree._metatree.LearnModel.pred_and_update:8
#: bayesml.metatree._metatree.LearnModel.predict:12
#: bayesml.metatree._metatree.LearnModel.predict_proba:13
#: bayesml.metatree._metatree.LearnModel.update_posterior:8 of
msgid ""
"A 2-dimensional float array whose size is "
"``(sample_size,c_dim_continuous)``,  by default None."
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_sample:14
#: bayesml.metatree._metatree.GenModel.gen_sample:26
#: bayesml.metatree._metatree.GenModel.save_sample:19
#: bayesml.metatree._metatree.GenModel.visualize_model:21
#: bayesml.metatree._metatree.LearnModel.calc_pred_dist:11
#: bayesml.metatree._metatree.LearnModel.fit:16
#: bayesml.metatree._metatree.LearnModel.pred_and_update:11
#: bayesml.metatree._metatree.LearnModel.predict:15
#: bayesml.metatree._metatree.LearnModel.predict_proba:16
#: bayesml.metatree._metatree.LearnModel.update_posterior:11 of
msgid "**x_categorical**"
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_sample:15
#: bayesml.metatree._metatree.GenModel.save_sample:20
#: bayesml.metatree._metatree.GenModel.visualize_model:22
#: bayesml.metatree._metatree.LearnModel.calc_pred_dist:12
#: bayesml.metatree._metatree.LearnModel.fit:17
#: bayesml.metatree._metatree.LearnModel.pred_and_update:12
#: bayesml.metatree._metatree.LearnModel.predict:16
#: bayesml.metatree._metatree.LearnModel.predict_proba:17
#: bayesml.metatree._metatree.LearnModel.update_posterior:12 of
msgid ""
"A 2-dimensional int array whose size is "
"``(sample_size,c_dim_categorical)``,  by default None. Each element "
"x_categorical[i,j] must satisfy  0 <= x_categorical[i,j] < "
"self.c_num_children_vec[self.c_dim_continuous+j]."
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_sample:-1
#: bayesml.metatree._metatree.LearnModel:-1
#: bayesml.metatree._metatree.LearnModel.calc_feature_importances:-1
#: bayesml.metatree._metatree.LearnModel.calc_pred_density:-1
#: bayesml.metatree._metatree.LearnModel.calc_pred_var:-1
#: bayesml.metatree._metatree.LearnModel.fit:-1
#: bayesml.metatree._metatree.LearnModel.make_prediction:-1
#: bayesml.metatree._metatree.LearnModel.pred_and_update:-1
#: bayesml.metatree._metatree.LearnModel.predict:-1
#: bayesml.metatree._metatree.LearnModel.predict_proba:-1
#: bayesml.metatree._metatree.LearnModel.update_posterior:-1 of
msgid "numpy.ndarray"
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_sample:24 of
msgid ""
"A 2-dimensional float array whose size is "
"``(sample_size,c_dim_continuous)``."
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_sample:27 of
msgid ""
"A 2-dimensional int array whose size is "
"``(sample_size,c_dim_categorical)``. Each element x_categorical[i,j] must"
" satisfies  0 <= x_categorical[i,j] < "
"self.c_num_children_vec[self.c_dim_continuous+j]."
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_sample:31
#: bayesml.metatree._metatree.LearnModel.calc_pred_density:7
#: bayesml.metatree._metatree.LearnModel.fit:21
#: bayesml.metatree._metatree.LearnModel.pred_and_update:16
#: bayesml.metatree._metatree.LearnModel.update_posterior:16 of
msgid "**y**"
msgstr ""

#: bayesml.metatree._metatree.GenModel.gen_sample:32 of
msgid "1 dimensional array whose size is ``sample_size``."
msgstr ""

#: bayesml.metatree._metatree.GenModel.save_sample:4 of
msgid "It is saved as a NpzFile with keyword: \"x\"."
msgstr ""

#: bayesml.metatree._metatree.GenModel.save_sample:8
#: bayesml.metatree._metatree.GenModel.visualize_model:8
#: bayesml.metatree._metatree.LearnModel.estimate_params:18
#: bayesml.metatree._metatree.LearnModel.visualize_posterior:8 of
msgid "**filename**"
msgstr ""

#: bayesml.metatree._metatree.GenModel.save_sample:-1 of
msgid "str"
msgstr ""

#: bayesml.metatree._metatree.GenModel.save_sample:9 of
msgid ""
"The filename to which the sample is saved. ``.npz`` will be appended if "
"it isn't there."
msgstr ""

#: bayesml.metatree._metatree.GenModel.save_sample:36 of
msgid ":obj:`numpy.savez_compressed`"
msgstr ""

#: bayesml.metatree._metatree.GenModel.visualize_model:4 of
msgid "Note that values of categorical features will be shown with jitters."
msgstr ""

#: bayesml.metatree._metatree.GenModel.visualize_model:-1
#: bayesml.metatree._metatree.LearnModel.estimate_params:-1
#: bayesml.metatree._metatree.LearnModel.make_prediction:-1
#: bayesml.metatree._metatree.LearnModel.pred_and_update:-1
#: bayesml.metatree._metatree.LearnModel.visualize_posterior:-1 of
msgid "str, optional"
msgstr ""

#: bayesml.metatree._metatree.GenModel.visualize_model:9
#: bayesml.metatree._metatree.LearnModel.estimate_params:19
#: bayesml.metatree._metatree.LearnModel.visualize_posterior:9 of
msgid "Filename for saving the figure, by default ``None``"
msgstr ""

#: bayesml.metatree._metatree.GenModel.visualize_model:11
#: bayesml.metatree._metatree.LearnModel.estimate_params:21
#: bayesml.metatree._metatree.LearnModel.visualize_posterior:11 of
msgid "**format**"
msgstr ""

#: bayesml.metatree._metatree.GenModel.visualize_model:12
#: bayesml.metatree._metatree.LearnModel.estimate_params:22
#: bayesml.metatree._metatree.LearnModel.visualize_posterior:12 of
msgid "Rendering output format (``\"pdf\"``, ``\"png\"``, ...)."
msgstr ""

#: bayesml.metatree._metatree.GenModel.visualize_model:15 of
msgid "A positive integer, by default 100"
msgstr ""

#: bayesml.metatree._metatree.GenModel.visualize_model:38
#: bayesml.metatree._metatree.LearnModel.estimate_params:45
#: bayesml.metatree._metatree.LearnModel.visualize_posterior:33 of
msgid ":obj:`graphviz.Digraph`"
msgstr ""

#: bayesml.metatree._metatree.GenModel.visualize_model:44
#: bayesml.metatree._metatree.LearnModel.visualize_posterior:39 of
msgid "Examples"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:1 of
msgid ""
"Bases: :py:class:`~bayesml.base.Posterior`, "
":py:class:`~bayesml.base.PredictiveMixin`"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:2 of
msgid "The posterior distribution and the predictive distribution."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:47 of
#, python-brace-format
msgid "constants for self.SubModel.LearnModel, by default {}"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:49
#: bayesml.metatree._metatree.LearnModel.set_h0_params:7 of
msgid "**h0_k_weight_vec**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:54
#: bayesml.metatree._metatree.LearnModel.set_h0_params:12 of
msgid "**h0_g**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:57
#: bayesml.metatree._metatree.LearnModel.set_h0_params:15 of
msgid "**sub_h0_params**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:58 of
#, python-brace-format
msgid "h0_params for self.SubModel.LearnModel, by default {}"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:60
#: bayesml.metatree._metatree.LearnModel.set_h0_params:18 of
msgid "**h0_metatree_list**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:63
#: bayesml.metatree._metatree.LearnModel.set_h0_params:21 of
msgid "**h0_metatree_prob_vec**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:64 of
msgid ""
"A vector of real numbers in :math:`[0, 1]`  that represents prior "
"distribution of h0_metatree_list,  by default uniform distribution Sum of"
" its elements must be 1.0."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:74
#: bayesml.metatree._metatree.LearnModel.set_hn_params:7 of
msgid "**hn_k_weight_vec**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:75 of
msgid ""
"A vector of positive real numbers whose length is  "
"``c_dim_continuous+c_dim_categorical``"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:78
#: bayesml.metatree._metatree.LearnModel.set_hn_params:12 of
msgid "**hn_g**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:-1 of
msgid "float"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:79 of
msgid "A real number in :math:`[0, 1]`"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:81
#: bayesml.metatree._metatree.LearnModel.set_hn_params:15 of
msgid "**sub_hn_params**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:-1 of
msgid "dict"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:82 of
msgid "hn_params for self.SubModel.LearnModel"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:84
#: bayesml.metatree._metatree.LearnModel.set_hn_params:18 of
msgid "**hn_metatree_list**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:-1 of
msgid "list of metatree._Node"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:85 of
msgid "Root nodes of meta-trees"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:87
#: bayesml.metatree._metatree.LearnModel.set_hn_params:21 of
msgid "**hn_metatree_prob_vec**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:88 of
msgid ""
"A vector of real numbers in :math:`[0, 1]`  that represents prior "
"distribution of h0_metatree_list. Sum of its elements is 1.0."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`calc_feature_importances "
"<bayesml.metatree.LearnModel.calc_feature_importances>`\\ \\(\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.calc_feature_importances:2
#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid "Calculate the feature importances"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`calc_pred_density "
"<bayesml.metatree.LearnModel.calc_pred_density>`\\ \\(y\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.calc_pred_density:2
#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
"Calculate the values of the probability density function of the "
"predictive distribution."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`calc_pred_dist <bayesml.metatree.LearnModel.calc_pred_dist>`\\ "
"\\(\\[x\\_continuous\\, x\\_categorical\\]\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.calc_pred_dist:2
#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid "Calculate the parameters of the predictive distribution."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`calc_pred_var <bayesml.metatree.LearnModel.calc_pred_var>`\\ "
"\\(\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.calc_pred_var:2
#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid "Calculate the variance of the predictive distribution."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`estimate_params <bayesml.metatree.LearnModel.estimate_params>`\\"
" \\(\\[loss\\, visualize\\, filename\\, ...\\]\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.estimate_params:2
#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid "Estimate the parameter under the given criterion."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`fit <bayesml.metatree.LearnModel.fit>`\\ \\(\\[x\\_continuous\\,"
" x\\_categorical\\, y\\, alg\\_type\\]\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.fit:2
#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid "Fit the model to the data."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`get_constants <bayesml.metatree.LearnModel.get_constants>`\\ "
"\\(\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.get_constants:2
#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid "Get constants of LearnModel."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`get_h0_params <bayesml.metatree.LearnModel.get_h0_params>`\\ "
"\\(\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`get_hn_params <bayesml.metatree.LearnModel.get_hn_params>`\\ "
"\\(\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.get_hn_params:2
#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid "Get the hyperparameters of the posterior distribution."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ":py:obj:`get_p_params <bayesml.metatree.LearnModel.get_p_params>`\\ \\(\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.get_p_params:2
#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid "Get the parameters of the predictive distribution."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`load_h0_params <bayesml.metatree.LearnModel.load_h0_params>`\\ "
"\\(filename\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid "Load the hyperparameters to h0_params."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`load_hn_params <bayesml.metatree.LearnModel.load_hn_params>`\\ "
"\\(filename\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid "Load the hyperparameters to hn_params."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`make_prediction <bayesml.metatree.LearnModel.make_prediction>`\\"
" \\(\\[loss\\]\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.make_prediction:2
#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid "Predict a new data point under the given criterion."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`overwrite_h0_params "
"<bayesml.metatree.LearnModel.overwrite_h0_params>`\\ \\(\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
"Overwrite the initial values of the hyperparameters of the posterior "
"distribution by the learned values."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`pred_and_update <bayesml.metatree.LearnModel.pred_and_update>`\\"
" \\(\\[x\\_continuous\\, ...\\]\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.pred_and_update:2
#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid "Predict a new data point and update the posterior sequentially."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`predict <bayesml.metatree.LearnModel.predict>`\\ "
"\\(\\[x\\_continuous\\, x\\_categorical\\]\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.predict:2
#: bayesml.metatree._metatree.LearnModel.predict_proba:2
#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid "Predict the data."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`predict_proba <bayesml.metatree.LearnModel.predict_proba>`\\ "
"\\(\\[x\\_continuous\\, x\\_categorical\\]\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`reset_hn_params <bayesml.metatree.LearnModel.reset_hn_params>`\\"
" \\(\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
"Reset the hyperparameters of the posterior distribution to their initial "
"values."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`save_h0_params <bayesml.metatree.LearnModel.save_h0_params>`\\ "
"\\(filename\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`save_hn_params <bayesml.metatree.LearnModel.save_hn_params>`\\ "
"\\(filename\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`set_h0_params <bayesml.metatree.LearnModel.set_h0_params>`\\ "
"\\(\\[h0\\_k\\_weight\\_vec\\, h0\\_g\\, ...\\]\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`set_hn_params <bayesml.metatree.LearnModel.set_hn_params>`\\ "
"\\(\\[hn\\_k\\_weight\\_vec\\, hn\\_g\\, ...\\]\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.set_hn_params:2
#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid "Set the hyperparameters of the posterior distribution."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`update_posterior "
"<bayesml.metatree.LearnModel.update_posterior>`\\ \\(\\[x\\_continuous\\,"
" ...\\]\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:2
#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
"Update the hyperparameters of the posterior distribution using traning "
"data."
msgstr ""

#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid ""
":py:obj:`visualize_posterior "
"<bayesml.metatree.LearnModel.visualize_posterior>`\\ \\(\\[filename\\, "
"format\\, ...\\]\\)"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.visualize_posterior:2
#: bayesml.metatree._metatree.LearnModel:132:<autosummary>:1 of
msgid "Visualize the posterior distribution for the parameter."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.set_h0_params:16 of
msgid "h0_params for self.SubModel.LearnModel, by default None"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.set_h0_params:22 of
msgid ""
"A vector of real numbers in :math:`[0, 1]`  that represents prior "
"distribution of h0_metatree_list,  by default None. Sum of its elements "
"must be 1.0."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.get_h0_params:10 of
msgid "**h0_params**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.get_h0_params:11 of
msgid "``\"h0_k_weight_vec\"`` : the value of ``self.h0_k_weight_vec``"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.get_h0_params:12 of
msgid "``\"h0_g\"`` : the value of ``self.h0_g``"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.get_h0_params:13 of
msgid "``\"sub_h0_params\"`` : the value of ``self.sub_h0_params``"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.get_h0_params:14 of
msgid "``\"h0_metatree_list\"`` : the value of ``self.h0_metatree_list``"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.get_h0_params:15 of
msgid "``\"h0_metatree_prob_vec\"`` : the value of ``self.h0_metatree_prob_vec``"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.set_hn_params:16 of
msgid "hn_params for self.SubModel.LearnModel, by default None"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.set_hn_params:22 of
msgid ""
"A vector of real numbers in :math:`[0, 1]`  that represents prior "
"distribution of hn_metatree_list,  by default None. Sum of its elements "
"must be 1.0."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.get_hn_params:10 of
msgid "**hn_params**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.get_hn_params:11 of
msgid "``\"hn_k_weight_vec\"`` : the value of ``self.hn_k_weight_vec``"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.get_hn_params:12 of
msgid "``\"hn_g\"`` : the value of ``self.hn_g``"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.get_hn_params:13 of
msgid "``\"sub_hn_params\"`` : the value of ``self.sub_hn_params``"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.get_hn_params:14 of
msgid "``\"hn_metatree_list\"`` : the value of ``self.hn_metatree_list``"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.get_hn_params:15 of
msgid "``\"hn_metatree_prob_vec\"`` : the value of ``self.hn_metatree_prob_vec``"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.fit:22
#: bayesml.metatree._metatree.LearnModel.pred_and_update:17
#: bayesml.metatree._metatree.LearnModel.update_posterior:17 of
msgid "values of objective variable whose dtype may be int or float"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.fit:24
#: bayesml.metatree._metatree.LearnModel.update_posterior:19 of
msgid "**alg_type**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.fit:-1
#: bayesml.metatree._metatree.LearnModel.update_posterior:-1 of
#, python-brace-format
msgid "{'MTRF', 'given_MT', 'MTMCMC', 'REMTMCMC'}, optional"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.fit:25
#: bayesml.metatree._metatree.LearnModel.update_posterior:20 of
msgid "type of algorithm, by default 'MTRF'"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.fit:27
#: bayesml.metatree._metatree.LearnModel.update_posterior:22 of
msgid "**\\*\\*kwargs**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:23 of
#, python-brace-format
msgid "optional parameters of algorithms, by default {}."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:25 of
msgid "When ``alg_type='MTRF'``"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:27 of
msgid ""
"In MTRF[1], ``sklearn.ensemble.RandomForestClassifier`` or  "
"``sklearn.ensemble.RandomForestRegressor`` is called as a subroutine.  "
"Arguments given as ``**kwargs`` are passed to these subroutines.  "
"Therefore, if you want to specify options for these subroutines,  e.g., "
"``n_estimators`` or ``random_state``, etc., you can specify them here.  "
"However, ``max_depth`` of these subroutines is set to the value of  "
"``self.c_max_depth``, so if you set it again, you will get an error."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:35 of
msgid "When ``alg_type='given_MT'``"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:37 of
msgid "There are no optional parameters for ``'given_MT'``."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:39 of
msgid "When ``alg_type='MTMCMC'``"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:41
#: bayesml.metatree._metatree.LearnModel.update_posterior:80 of
msgid "burn_in : int"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:43
#: bayesml.metatree._metatree.LearnModel.update_posterior:82 of
msgid "The length of the burn-in phase, by default 100."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:45
#: bayesml.metatree._metatree.LearnModel.update_posterior:84 of
msgid "num_metatrees : int"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:47
#: bayesml.metatree._metatree.LearnModel.update_posterior:86 of
msgid "The number of sampling after burn-in phase, by default 500."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:49
#: bayesml.metatree._metatree.LearnModel.update_posterior:93 of
msgid "g_max : float"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:51 of
msgid ""
"An initial value of a parameter to controll the entropy of the proposal "
"distribution  in the Metropolis-Hastings step, by default 0.0. See also "
"Appendix B.4 in [2].  ``g_max`` will be tuned in burn-in phase by "
"Algorithm 1 in [2]."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:55 of
msgid "rho : float"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:57 of
msgid "Parameter of Algorithm 1 in [2], by default 0.99."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:59 of
msgid "phi : float"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:61 of
msgid "Parameter of Algorithm 1 in [2], by default 0.999."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:63 of
msgid "p_obj : float"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:65 of
#, python-brace-format
msgid ""
"Parameter of Algorithm 1 in [2], by default 0.3.  ``p_obj`` corresponds "
"to $r_\\\\mathrm{obj}$ in Algorithm 1 in [2]."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:68
#: bayesml.metatree._metatree.LearnModel.update_posterior:116 of
#, python-brace-format
msgid "threshold_type : {'1d_kmeans', 'sample_midpoint'}"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:70
#: bayesml.metatree._metatree.LearnModel.update_posterior:118 of
msgid ""
"A generating rule of thresholds for continuous explanatory variables,  by"
" default ``'1d_kmeans'``. See also Appendix G in [2]."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:73
#: bayesml.metatree._metatree.LearnModel.update_posterior:121 of
#, python-brace-format
msgid "seed : {None, int}, optional"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:75
#: bayesml.metatree._metatree.LearnModel.update_posterior:123 of
msgid "A seed to initialize numpy.random.default_rng(), by default None."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:78 of
msgid "When ``alg_type='REMTMCMC'``"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:88 of
msgid "num_chains : int"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:90 of
msgid ""
"Number of replicas in replica exchange Monte Carlo Methods,  by default "
"8. It corresponds to $J$ in Appendix D in[2]"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:95 of
msgid ""
"A parameter to controll the entropy of the proposal distribution  in the "
"Metropolis-Hastings step, by default 0.9. In contrast to  MTMCMC, "
"``g_max`` tuning is not performed in burn-in phase. See also Appendix B.4"
" in [2]."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:100 of
#, python-brace-format
msgid "beta_vec : {None, numpy.ndarray}"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:102 of
msgid ""
"Temperature parameters for replica exchange Monte Carlo methods,  by "
"default None. It must satisfy $0 \\\\leq \\\\beta_1 < \\\\beta_2 < "
"\\\\cdots < \\\\beta_J = 1$. If None, $\\\\beta_j = j/J$. See also "
"Appendix D in [2]."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:106 of
msgid "num_interval : int"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:108 of
msgid ""
"Length of interval between replica exchange processes, by default 10. See"
" also Appendix D in [2]."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:111 of
msgid "num_exchange : int"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:113 of
msgid ""
"Number of replicas exchanged in a single replica exchange process,  by "
"default 4. See also Appendix D in [2]."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:138 of
msgid ":obj:`sklearn.ensemble.RandomForestClassifier`"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:140 of
msgid ":obj:`sklearn.ensemble.RandomForestRegressor`"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:146 of
msgid ""
"Dobashi, N., Saito, S., Nakahara, Y., & Matsushima, T. (2021).  Meta-Tree"
" Random Forest: Probabilistic Data-Generative Model and  Bayes Optimal "
"Prediction. *Entropy*, 23(6), 768.  Available from "
"https://doi.org/10.3390/e23060768"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:150 of
msgid ""
"Nakahara, Y., Saito, S., Ichijo, N., Kazama, K. & Matsushima, T. (2025)."
"  Bayesian Decision Theory on Decision Trees: Uncertainty Evaluation and "
"Interpretability.  *Proceedings of The 28th International Conference on "
"Artificial Intelligence and Statistics*,  in *Proceedings of Machine "
"Learning Research* 258:1045-1053  Available from "
"https://proceedings.mlr.press/v258/nakahara25a.html."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.update_posterior:158 of
msgid "[Rd12bbd48bc8d-1]_, [Rd12bbd48bc8d-2]_"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.estimate_params:4 of
msgid ""
"The approximate MAP meta-tree  :math:`M_{T,\\boldsymbol{k}_b} = "
"\\mathrm{argmax} p(M_{T,\\boldsymbol{k}_{b'}} | \\boldsymbol{x}^n, y^n)`"
"  will be returned."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.estimate_params:10
#: bayesml.metatree._metatree.LearnModel.make_prediction:7
#: bayesml.metatree._metatree.LearnModel.pred_and_update:19 of
msgid "**loss**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.estimate_params:11 of
msgid ""
"Loss function underlying the Bayes risk function, by default ``\"0-1\"``."
" This function supports only ``\"0-1\"``."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.estimate_params:14 of
msgid "**visualize**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.estimate_params:15 of
msgid ""
"If ``True``, the estimated metatree will be visualized, by default "
"``True``. This visualization requires ``graphviz``."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.estimate_params:28 of
msgid "**map_root**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.estimate_params:-1 of
msgid "metatree._Node"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.estimate_params:29 of
msgid ""
"The root node of the estimated meta-tree  that also contains the "
"estimated parameters in each node."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.estimate_params:39 of
msgid ""
"Multiple metatrees can represent equivalent model classes.  This function"
" does not take such duplication into account."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.visualize_posterior:4 of
msgid "This method requires ``graphviz``."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.visualize_posterior:14 of
msgid "**num_metatrees**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.visualize_posterior:15 of
msgid "Number of metatrees to be visualized, by default 3."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.visualize_posterior:18 of
msgid ""
"If ``True``, hyperparameters at each node will be visualized.  if "
"``False``, estimated parameters at each node will be visulaized."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.get_p_params:4 of
msgid ""
"This model does not have a simple parametric expression of the predictive"
" distribution. Therefore, this function returns ``None``."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.get_p_params:12 of
msgid "``None``"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.make_prediction:8 of
msgid ""
"Loss function underlying the Bayes risk function, by default None. This "
"function supports \"squared\", \"0-1\", and \"KL\". If loss is None, "
"\"squared\" is used when the submodel is a regression model (normal, "
"poisson, exponential, or linear regression),  and \"0-1\" is used when "
"the submodel is a classification model (bernoulli or categorical)."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.make_prediction:17
#: bayesml.metatree._metatree.LearnModel.pred_and_update:27
#: bayesml.metatree._metatree.LearnModel.predict:24 of
msgid "**predicted_values**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.make_prediction:18
#: bayesml.metatree._metatree.LearnModel.pred_and_update:28 of
msgid ""
"The predicted values under the given loss function.  If the submodel is a"
" classification model (bernoulli or categorical) and  the loss function "
"is \"KL\", the predictive distribution will be returned as numpy.ndarray "
"that consists of occurence probabilities."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.make_prediction:23
#: bayesml.metatree._metatree.LearnModel.pred_and_update:33 of
msgid ""
"The size of the predicted values or the number of predictive distribution"
" is  the same as the sample size of x_continuous and x_categorical  when "
"you called calc_pred_dist(x_continuous,x_categorical)."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.pred_and_update:20 of
msgid ""
"Loss function underlying the Bayes risk function, by default None. This "
"function supports \"squared\", \"0-1\", and \"KL\"."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.calc_pred_var:10 of
msgid "**vars**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.calc_pred_var:11 of
msgid ""
"The variances of the predictive distribution.  The size of the vars is "
"the same as the sample size of x when you called calc_pred_dist(x)."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.calc_feature_importances:10 of
msgid "**feature_importances**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.calc_feature_importances:11 of
msgid "The feature importances."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.calc_pred_density:8 of
msgid ""
"y must have a size that is broadcastable to (sample_size,), i.e.,  the "
"size along the last dimension must be 1 or sample_size. Here, sample_size"
" is the sample size of x when you called calc_pred_dist(x)."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.calc_pred_density:16 of
msgid "**p_y**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.calc_pred_density:17 of
msgid ""
"The values of the probability density function of the predictive "
"distribution."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.fit:4
#: bayesml.metatree._metatree.LearnModel.predict:4 of
msgid "This function is a wrapper of the following functions:"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.fit:28 of
#, python-brace-format
msgid "optional parameters of algorithms, by default {}"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.fit:34 of
msgid "**self**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.fit:-1 of
msgid "LearnModel"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.fit:35 of
msgid "The fitted model."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.predict:25 of
msgid ""
"If the submodel is a regression model (normal, poisson, exponential, or "
"linear regression),  the predicted values under the squared loss function"
" will be returned.  If the submodel is a classification model (bernoulli "
"or categorical),  the predicted values under the 0-1 loss function will "
"be returend.  The size of the predicted values is the same as the sample "
"size of  x_continuous and x_categorical."
msgstr ""

#: bayesml.metatree._metatree.LearnModel.predict_proba:4 of
msgid ""
"This function is supported when the submodel is a classification model "
"(bernoulli or categorical). It is a wrapper of the following functions:"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.predict_proba:25 of
msgid "**predicted_distributions**"
msgstr ""

#: bayesml.metatree._metatree.LearnModel.predict_proba:26 of
msgid ""
"The predicted distributions under the KL loss function.  The number of "
"the predicted distributions is the same as the sample size of  "
"x_continuous and x_categorical."
msgstr ""

